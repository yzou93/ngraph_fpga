// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module msg_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        node_bram_address0,
        node_bram_ce0,
        node_bram_q0,
        node_bram_address1,
        node_bram_ce1,
        node_bram_we1,
        node_bram_d1,
        metadata,
        msg_in_strm_V_dout,
        msg_in_strm_V_empty_n,
        msg_in_strm_V_read
);

parameter    ap_ST_fsm_state1 = 17'b1;
parameter    ap_ST_fsm_state2 = 17'b10;
parameter    ap_ST_fsm_state3 = 17'b100;
parameter    ap_ST_fsm_state4 = 17'b1000;
parameter    ap_ST_fsm_state5 = 17'b10000;
parameter    ap_ST_fsm_state6 = 17'b100000;
parameter    ap_ST_fsm_state7 = 17'b1000000;
parameter    ap_ST_fsm_state8 = 17'b10000000;
parameter    ap_ST_fsm_state9 = 17'b100000000;
parameter    ap_ST_fsm_state10 = 17'b1000000000;
parameter    ap_ST_fsm_state11 = 17'b10000000000;
parameter    ap_ST_fsm_state12 = 17'b100000000000;
parameter    ap_ST_fsm_state13 = 17'b1000000000000;
parameter    ap_ST_fsm_state14 = 17'b10000000000000;
parameter    ap_ST_fsm_state15 = 17'b100000000000000;
parameter    ap_ST_fsm_state16 = 17'b1000000000000000;
parameter    ap_ST_fsm_state17 = 17'b10000000000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv32_F = 32'b1111;
parameter    ap_const_lv5_0 = 5'b00000;
parameter    ap_const_lv32_10 = 32'b10000;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv32_17 = 32'b10111;
parameter    ap_const_lv32_1E = 32'b11110;
parameter    ap_const_lv9_181 = 9'b110000001;
parameter    ap_const_lv8_7F = 8'b1111111;
parameter    ap_const_lv32_1B = 32'b11011;
parameter    ap_const_lv16_599 = 16'b10110011001;
parameter    ap_const_lv5_10 = 5'b10000;
parameter    ap_const_lv5_1 = 5'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [15:0] node_bram_address0;
output   node_bram_ce0;
input  [31:0] node_bram_q0;
output  [15:0] node_bram_address1;
output   node_bram_ce1;
output   node_bram_we1;
output  [31:0] node_bram_d1;
input  [63:0] metadata;
input  [31:0] msg_in_strm_V_dout;
input   msg_in_strm_V_empty_n;
output   msg_in_strm_V_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg node_bram_ce0;
reg node_bram_ce1;
reg node_bram_we1;
reg msg_in_strm_V_read;

(* fsm_encoding = "none" *) reg   [16:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
reg    msg_in_strm_V_blk_n;
wire   [0:0] ap_CS_fsm_state2;
wire   [0:0] exitcond3_fu_125_p2;
wire   [0:0] ap_CS_fsm_state8;
wire   [31:0] tmp_fu_121_p1;
reg   [31:0] tmp_reg_287;
wire   [31:0] i_1_fu_130_p2;
reg   [31:0] i_1_reg_295;
wire   [22:0] loc_V_1_fu_150_p1;
reg   [22:0] loc_V_1_reg_300;
wire   [0:0] isNeg_fu_164_p3;
reg   [0:0] isNeg_reg_305;
wire   [8:0] sh_assign_1_fu_182_p3;
reg   [8:0] sh_assign_1_reg_310;
wire   [4:0] tmp_7_fu_245_p3;
reg   [4:0] tmp_7_reg_316;
wire   [0:0] ap_CS_fsm_state3;
wire   [0:0] ap_CS_fsm_state4;
wire   [15:0] grp_fu_255_p2;
reg   [15:0] tmp_3_reg_326;
wire   [0:0] ap_CS_fsm_state6;
wire   [4:0] m_1_fu_267_p2;
reg   [4:0] m_1_reg_334;
wire   [0:0] ap_CS_fsm_state7;
reg   [15:0] node_bram_addr_reg_339;
wire   [0:0] exitcond_fu_261_p2;
reg   [31:0] tmp_8_reg_345;
reg   [31:0] node_bram_load_reg_350;
wire   [31:0] grp_fu_117_p2;
reg   [31:0] tmp_2_reg_355;
wire   [0:0] ap_CS_fsm_state16;
reg   [31:0] i_reg_95;
reg   [4:0] m_reg_106;
wire   [0:0] ap_CS_fsm_state17;
wire   [63:0] tmp_14_cast_fu_282_p1;
wire   [0:0] ap_CS_fsm_state9;
wire   [31:0] p_Val2_s_fu_136_p1;
wire   [7:0] loc_V_fu_140_p4;
wire   [8:0] tmp_i_i_i_cast_fu_154_p1;
wire   [8:0] sh_assign_fu_158_p2;
wire   [7:0] tmp_7_i_i_fu_172_p2;
wire  signed [8:0] tmp_7_i_i_cast_fu_178_p1;
wire   [23:0] p_Result_s_fu_190_p3;
wire  signed [31:0] sh_assign_1_i_i_cast_fu_201_p1;
wire  signed [23:0] sh_assign_1_i_i_cast_1_fu_204_p1;
wire   [77:0] tmp_i_i_fu_197_p1;
wire   [77:0] tmp_8_i_i_fu_207_p1;
wire   [23:0] tmp_9_i_i_fu_211_p2;
wire   [0:0] tmp_5_fu_223_p3;
wire   [77:0] tmp_1_i_i_fu_217_p2;
wire   [4:0] tmp_s_fu_231_p1;
wire   [4:0] tmp_6_fu_235_p4;
wire   [11:0] grp_fu_255_p0;
wire   [4:0] grp_fu_255_p1;
wire   [15:0] tmp_1_cast_fu_273_p1;
wire   [15:0] tmp_4_fu_277_p2;
reg   [16:0] ap_NS_fsm;
wire   [15:0] grp_fu_255_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 17'b1;
end

top_fadd_32ns_32nbkb #(
    .ID( 1 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
top_fadd_32ns_32nbkb_x_U45(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(node_bram_load_reg_350),
    .din1(tmp_8_reg_345),
    .ce(1'b1),
    .dout(grp_fu_117_p2)
);

top_mul_12ns_5ns_eOg #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 5 ),
    .dout_WIDTH( 16 ))
top_mul_12ns_5ns_eOg_x_U46(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_255_p0),
    .din1(grp_fu_255_p1),
    .ce(1'b1),
    .dout(grp_fu_255_p2)
);

always @ (posedge ap_rst or posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & ~(1'b0 == exitcond_fu_261_p2))) begin
        i_reg_95 <= i_1_reg_295;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        i_reg_95 <= ap_const_lv32_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        m_reg_106 <= m_1_reg_334;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        m_reg_106 <= ap_const_lv5_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & ~((exitcond3_fu_125_p2 == 1'b0) & (msg_in_strm_V_empty_n == 1'b0)))) begin
        i_1_reg_295 <= i_1_fu_130_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond3_fu_125_p2 == 1'b0) & ~((exitcond3_fu_125_p2 == 1'b0) & (msg_in_strm_V_empty_n == 1'b0)))) begin
        isNeg_reg_305 <= sh_assign_fu_158_p2[ap_const_lv32_8];
        loc_V_1_reg_300 <= loc_V_1_fu_150_p1;
        sh_assign_1_reg_310 <= sh_assign_1_fu_182_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        m_1_reg_334 <= m_1_fu_267_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (1'b0 == exitcond_fu_261_p2))) begin
        node_bram_addr_reg_339 <= tmp_14_cast_fu_282_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & ~(msg_in_strm_V_empty_n == 1'b0))) begin
        node_bram_load_reg_350 <= node_bram_q0;
        tmp_8_reg_345 <= msg_in_strm_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        tmp_2_reg_355 <= grp_fu_117_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        tmp_3_reg_326 <= grp_fu_255_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        tmp_7_reg_316 <= tmp_7_fu_245_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        tmp_reg_287 <= tmp_fu_121_p1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1)) | ((1'b1 == ap_CS_fsm_state2) & ~((exitcond3_fu_125_p2 == 1'b0) & (msg_in_strm_V_empty_n == 1'b0)) & ~(exitcond3_fu_125_p2 == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & ~((exitcond3_fu_125_p2 == 1'b0) & (msg_in_strm_V_empty_n == 1'b0)) & ~(exitcond3_fu_125_p2 == 1'b0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state2) & (exitcond3_fu_125_p2 == 1'b0)) | (1'b1 == ap_CS_fsm_state8))) begin
        msg_in_strm_V_blk_n = msg_in_strm_V_empty_n;
    end else begin
        msg_in_strm_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state2) & (exitcond3_fu_125_p2 == 1'b0) & ~((exitcond3_fu_125_p2 == 1'b0) & (msg_in_strm_V_empty_n == 1'b0))) | ((1'b1 == ap_CS_fsm_state8) & ~(msg_in_strm_V_empty_n == 1'b0)))) begin
        msg_in_strm_V_read = 1'b1;
    end else begin
        msg_in_strm_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        node_bram_ce0 = 1'b1;
    end else begin
        node_bram_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        node_bram_ce1 = 1'b1;
    end else begin
        node_bram_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        node_bram_we1 = 1'b1;
    end else begin
        node_bram_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((exitcond3_fu_125_p2 == 1'b0) & (msg_in_strm_V_empty_n == 1'b0)) & ~(exitcond3_fu_125_p2 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((exitcond3_fu_125_p2 == 1'b0) & ~((exitcond3_fu_125_p2 == 1'b0) & (msg_in_strm_V_empty_n == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (~(1'b0 == exitcond_fu_261_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            if (~(msg_in_strm_V_empty_n == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[ap_const_lv32_0];

assign ap_CS_fsm_state16 = ap_CS_fsm[ap_const_lv32_F];

assign ap_CS_fsm_state17 = ap_CS_fsm[ap_const_lv32_10];

assign ap_CS_fsm_state2 = ap_CS_fsm[ap_const_lv32_1];

assign ap_CS_fsm_state3 = ap_CS_fsm[ap_const_lv32_2];

assign ap_CS_fsm_state4 = ap_CS_fsm[ap_const_lv32_3];

assign ap_CS_fsm_state6 = ap_CS_fsm[ap_const_lv32_5];

assign ap_CS_fsm_state7 = ap_CS_fsm[ap_const_lv32_6];

assign ap_CS_fsm_state8 = ap_CS_fsm[ap_const_lv32_7];

assign ap_CS_fsm_state9 = ap_CS_fsm[ap_const_lv32_8];

assign exitcond3_fu_125_p2 = ((i_reg_95 == tmp_reg_287) ? 1'b1 : 1'b0);

assign exitcond_fu_261_p2 = ((m_reg_106 == ap_const_lv5_10) ? 1'b1 : 1'b0);

assign grp_fu_255_p0 = ap_const_lv16_599;

assign grp_fu_255_p1 = grp_fu_255_p10;

assign grp_fu_255_p10 = tmp_7_reg_316;

assign i_1_fu_130_p2 = (i_reg_95 + ap_const_lv32_1);

assign isNeg_fu_164_p3 = sh_assign_fu_158_p2[ap_const_lv32_8];

assign loc_V_1_fu_150_p1 = p_Val2_s_fu_136_p1[22:0];

assign loc_V_fu_140_p4 = {{p_Val2_s_fu_136_p1[ap_const_lv32_1E : ap_const_lv32_17]}};

assign m_1_fu_267_p2 = (m_reg_106 + ap_const_lv5_1);

assign node_bram_address0 = tmp_14_cast_fu_282_p1;

assign node_bram_address1 = node_bram_addr_reg_339;

assign node_bram_d1 = tmp_2_reg_355;

assign p_Result_s_fu_190_p3 = {{1'b1}, {loc_V_1_reg_300}};

assign p_Val2_s_fu_136_p1 = msg_in_strm_V_dout;

assign sh_assign_1_fu_182_p3 = ((isNeg_fu_164_p3[0:0] === 1'b1) ? tmp_7_i_i_cast_fu_178_p1 : sh_assign_fu_158_p2);

assign sh_assign_1_i_i_cast_1_fu_204_p1 = $signed(sh_assign_1_reg_310);

assign sh_assign_1_i_i_cast_fu_201_p1 = $signed(sh_assign_1_reg_310);

assign sh_assign_fu_158_p2 = ($signed(ap_const_lv9_181) + $signed(tmp_i_i_i_cast_fu_154_p1));

assign tmp_14_cast_fu_282_p1 = tmp_4_fu_277_p2;

assign tmp_1_cast_fu_273_p1 = m_reg_106;

assign tmp_1_i_i_fu_217_p2 = tmp_i_i_fu_197_p1 << tmp_8_i_i_fu_207_p1;

assign tmp_4_fu_277_p2 = (tmp_3_reg_326 + tmp_1_cast_fu_273_p1);

assign tmp_5_fu_223_p3 = tmp_9_i_i_fu_211_p2[ap_const_lv32_17];

assign tmp_6_fu_235_p4 = {{tmp_1_i_i_fu_217_p2[ap_const_lv32_1B : ap_const_lv32_17]}};

assign tmp_7_fu_245_p3 = ((isNeg_reg_305[0:0] === 1'b1) ? tmp_s_fu_231_p1 : tmp_6_fu_235_p4);

assign tmp_7_i_i_cast_fu_178_p1 = $signed(tmp_7_i_i_fu_172_p2);

assign tmp_7_i_i_fu_172_p2 = (ap_const_lv8_7F - loc_V_fu_140_p4);

assign tmp_8_i_i_fu_207_p1 = $unsigned(sh_assign_1_i_i_cast_fu_201_p1);

assign tmp_9_i_i_fu_211_p2 = p_Result_s_fu_190_p3 >> sh_assign_1_i_i_cast_1_fu_204_p1;

assign tmp_fu_121_p1 = metadata[31:0];

assign tmp_i_i_fu_197_p1 = p_Result_s_fu_190_p3;

assign tmp_i_i_i_cast_fu_154_p1 = loc_V_fu_140_p4;

assign tmp_s_fu_231_p1 = tmp_5_fu_223_p3;

endmodule //msg_proc
