// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module gather_inner_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        metadata_strm_V_dout,
        metadata_strm_V_empty_n,
        metadata_strm_V_read,
        node_bram_address0,
        node_bram_ce0,
        node_bram_q0,
        node_bram_address1,
        node_bram_ce1,
        node_bram_we1,
        node_bram_d1,
        msg_in_strm_V_dout,
        msg_in_strm_V_empty_n,
        msg_in_strm_V_read
);

parameter    ap_ST_fsm_state1 = 3'b1;
parameter    ap_ST_fsm_state2 = 3'b10;
parameter    ap_ST_fsm_state3 = 3'b100;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv7_0 = 7'b0000000;
parameter    ap_const_lv7_55 = 7'b1010101;
parameter    ap_const_lv7_1 = 7'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [63:0] metadata_strm_V_dout;
input   metadata_strm_V_empty_n;
output   metadata_strm_V_read;
output  [15:0] node_bram_address0;
output   node_bram_ce0;
input  [31:0] node_bram_q0;
output  [15:0] node_bram_address1;
output   node_bram_ce1;
output   node_bram_we1;
output  [31:0] node_bram_d1;
input  [31:0] msg_in_strm_V_dout;
input   msg_in_strm_V_empty_n;
output   msg_in_strm_V_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg metadata_strm_V_read;
reg msg_in_strm_V_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
reg    metadata_strm_V_blk_n;
wire   [0:0] ap_CS_fsm_state2;
wire   [0:0] exitcond_fu_69_p2;
wire   [6:0] src_intv_fu_75_p2;
reg   [6:0] src_intv_reg_84;
reg   [63:0] tmp_reg_89;
wire    grp_msg_proc_fu_59_ap_start;
wire    grp_msg_proc_fu_59_ap_done;
wire    grp_msg_proc_fu_59_ap_idle;
wire    grp_msg_proc_fu_59_ap_ready;
wire   [15:0] grp_msg_proc_fu_59_node_bram_address0;
wire    grp_msg_proc_fu_59_node_bram_ce0;
wire   [15:0] grp_msg_proc_fu_59_node_bram_address1;
wire    grp_msg_proc_fu_59_node_bram_ce1;
wire    grp_msg_proc_fu_59_node_bram_we1;
wire   [31:0] grp_msg_proc_fu_59_node_bram_d1;
wire    grp_msg_proc_fu_59_msg_in_strm_V_read;
reg   [6:0] src_intv2_reg_48;
wire   [0:0] ap_CS_fsm_state3;
reg    ap_reg_grp_msg_proc_fu_59_ap_start;
reg   [2:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'b1;
#0 ap_reg_grp_msg_proc_fu_59_ap_start = 1'b0;
end

msg_proc grp_msg_proc_fu_59(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_msg_proc_fu_59_ap_start),
    .ap_done(grp_msg_proc_fu_59_ap_done),
    .ap_idle(grp_msg_proc_fu_59_ap_idle),
    .ap_ready(grp_msg_proc_fu_59_ap_ready),
    .node_bram_address0(grp_msg_proc_fu_59_node_bram_address0),
    .node_bram_ce0(grp_msg_proc_fu_59_node_bram_ce0),
    .node_bram_q0(node_bram_q0),
    .node_bram_address1(grp_msg_proc_fu_59_node_bram_address1),
    .node_bram_ce1(grp_msg_proc_fu_59_node_bram_ce1),
    .node_bram_we1(grp_msg_proc_fu_59_node_bram_we1),
    .node_bram_d1(grp_msg_proc_fu_59_node_bram_d1),
    .metadata(tmp_reg_89),
    .msg_in_strm_V_dout(msg_in_strm_V_dout),
    .msg_in_strm_V_empty_n(msg_in_strm_V_empty_n),
    .msg_in_strm_V_read(grp_msg_proc_fu_59_msg_in_strm_V_read)
);

always @ (posedge ap_rst or posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_rst or posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_continue)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & ~((exitcond_fu_69_p2 == 1'b0) & (metadata_strm_V_empty_n == 1'b0)) & ~(exitcond_fu_69_p2 == 1'b0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_rst or posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_grp_msg_proc_fu_59_ap_start <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state2) & (exitcond_fu_69_p2 == 1'b0) & ~((exitcond_fu_69_p2 == 1'b0) & (metadata_strm_V_empty_n == 1'b0)))) begin
            ap_reg_grp_msg_proc_fu_59_ap_start <= 1'b1;
        end else if ((1'b1 == grp_msg_proc_fu_59_ap_ready)) begin
            ap_reg_grp_msg_proc_fu_59_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~((ap_start == 1'b0) | (ap_done_reg == 1'b1)))) begin
        src_intv2_reg_48 <= ap_const_lv7_0;
    end else if (((1'b1 == ap_CS_fsm_state3) & ~(1'b0 == grp_msg_proc_fu_59_ap_done))) begin
        src_intv2_reg_48 <= src_intv_reg_84;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & ~((exitcond_fu_69_p2 == 1'b0) & (metadata_strm_V_empty_n == 1'b0)))) begin
        src_intv_reg_84 <= src_intv_fu_75_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond_fu_69_p2 == 1'b0) & ~((exitcond_fu_69_p2 == 1'b0) & (metadata_strm_V_empty_n == 1'b0)))) begin
        tmp_reg_89 <= metadata_strm_V_dout;
    end
end

always @ (*) begin
    if (((1'b1 == ap_done_reg) | ((1'b1 == ap_CS_fsm_state2) & ~((exitcond_fu_69_p2 == 1'b0) & (metadata_strm_V_empty_n == 1'b0)) & ~(exitcond_fu_69_p2 == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & ~((exitcond_fu_69_p2 == 1'b0) & (metadata_strm_V_empty_n == 1'b0)) & ~(exitcond_fu_69_p2 == 1'b0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond_fu_69_p2 == 1'b0))) begin
        metadata_strm_V_blk_n = metadata_strm_V_empty_n;
    end else begin
        metadata_strm_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond_fu_69_p2 == 1'b0) & ~((exitcond_fu_69_p2 == 1'b0) & (metadata_strm_V_empty_n == 1'b0)))) begin
        metadata_strm_V_read = 1'b1;
    end else begin
        metadata_strm_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        msg_in_strm_V_read = grp_msg_proc_fu_59_msg_in_strm_V_read;
    end else begin
        msg_in_strm_V_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (~((ap_start == 1'b0) | (ap_done_reg == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((exitcond_fu_69_p2 == 1'b0) & (metadata_strm_V_empty_n == 1'b0)) & ~(exitcond_fu_69_p2 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((exitcond_fu_69_p2 == 1'b0) & ~((exitcond_fu_69_p2 == 1'b0) & (metadata_strm_V_empty_n == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (~(1'b0 == grp_msg_proc_fu_59_ap_done)) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[ap_const_lv32_0];

assign ap_CS_fsm_state2 = ap_CS_fsm[ap_const_lv32_1];

assign ap_CS_fsm_state3 = ap_CS_fsm[ap_const_lv32_2];

assign exitcond_fu_69_p2 = ((src_intv2_reg_48 == ap_const_lv7_55) ? 1'b1 : 1'b0);

assign grp_msg_proc_fu_59_ap_start = ap_reg_grp_msg_proc_fu_59_ap_start;

assign node_bram_address0 = grp_msg_proc_fu_59_node_bram_address0;

assign node_bram_address1 = grp_msg_proc_fu_59_node_bram_address1;

assign node_bram_ce0 = grp_msg_proc_fu_59_node_bram_ce0;

assign node_bram_ce1 = grp_msg_proc_fu_59_node_bram_ce1;

assign node_bram_d1 = grp_msg_proc_fu_59_node_bram_d1;

assign node_bram_we1 = grp_msg_proc_fu_59_node_bram_we1;

assign src_intv_fu_75_p2 = (src_intv2_reg_48 + ap_const_lv7_1);

endmodule //gather_inner_proc
