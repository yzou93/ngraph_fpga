// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module edge_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        node_bram_address0,
        node_bram_ce0,
        node_bram_q0,
        metadata,
        edge_strm_V_src_V_dout,
        edge_strm_V_src_V_empty_n,
        edge_strm_V_src_V_read,
        edge_strm_V_dst_V_dout,
        edge_strm_V_dst_V_empty_n,
        edge_strm_V_dst_V_read,
        edge_strm_V_c_dout,
        edge_strm_V_c_empty_n,
        edge_strm_V_c_read,
        msg_out_strm_V_din,
        msg_out_strm_V_full_n,
        msg_out_strm_V_write,
        wt_address0,
        wt_ce0,
        wt_q0
);

parameter    ap_ST_fsm_state1 = 11'b1;
parameter    ap_ST_fsm_state2 = 11'b10;
parameter    ap_ST_fsm_state3 = 11'b100;
parameter    ap_ST_fsm_state4 = 11'b1000;
parameter    ap_ST_fsm_state5 = 11'b10000;
parameter    ap_ST_fsm_state6 = 11'b100000;
parameter    ap_ST_fsm_state7 = 11'b1000000;
parameter    ap_ST_fsm_state8 = 11'b10000000;
parameter    ap_ST_fsm_state9 = 11'b100000000;
parameter    ap_ST_fsm_state10 = 11'b1000000000;
parameter    ap_ST_fsm_state11 = 11'b10000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv32_A = 32'b1010;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv32_9 = 32'b1001;
parameter    ap_const_lv5_0 = 5'b00000;
parameter    ap_const_lv32_20 = 32'b100000;
parameter    ap_const_lv32_3F = 32'b111111;
parameter    ap_const_lv5_10 = 5'b10000;
parameter    ap_const_lv5_1 = 5'b1;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv32_6 = 32'b110;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [15:0] node_bram_address0;
output   node_bram_ce0;
input  [31:0] node_bram_q0;
input  [63:0] metadata;
input  [11:0] edge_strm_V_src_V_dout;
input   edge_strm_V_src_V_empty_n;
output   edge_strm_V_src_V_read;
input  [11:0] edge_strm_V_dst_V_dout;
input   edge_strm_V_dst_V_empty_n;
output   edge_strm_V_dst_V_read;
input  [31:0] edge_strm_V_c_dout;
input   edge_strm_V_c_empty_n;
output   edge_strm_V_c_read;
output  [31:0] msg_out_strm_V_din;
input   msg_out_strm_V_full_n;
output   msg_out_strm_V_write;
output  [14:0] wt_address0;
output   wt_ce0;
input  [31:0] wt_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[31:0] msg_out_strm_V_din;
reg msg_out_strm_V_write;

(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
reg    edge_strm_V_src_V_blk_n;
wire   [0:0] ap_CS_fsm_state2;
wire   [0:0] exitcond5_fu_161_p2;
reg    edge_strm_V_dst_V_blk_n;
reg    edge_strm_V_c_blk_n;
reg    msg_out_strm_V_blk_n;
wire   [0:0] ap_CS_fsm_state9;
wire   [0:0] ap_CS_fsm_state11;
reg   [31:0] tmp_s_reg_207;
wire   [31:0] i_2_fu_166_p2;
reg   [31:0] i_2_reg_215;
wire    edge_strm_V_c0_status;
reg   [11:0] tmp_src_V_reg_220;
reg   [11:0] tmp_dst_V_reg_225;
reg   [31:0] tmp_c_reg_230;
wire   [0:0] ap_CS_fsm_state3;
wire    grp_mat_mult_fu_137_ap_done;
wire   [31:0] grp_fu_148_p1;
reg   [31:0] tmp_7_reg_240;
wire   [0:0] ap_CS_fsm_state8;
wire   [4:0] i_3_fu_196_p2;
reg   [4:0] i_3_reg_248;
wire   [0:0] ap_CS_fsm_state10;
wire   [0:0] exitcond_fu_190_p2;
reg   [3:0] res_address0;
reg    res_ce0;
reg    res_we0;
wire   [31:0] res_q0;
wire    grp_mat_mult_fu_137_ap_start;
wire    grp_mat_mult_fu_137_ap_idle;
wire    grp_mat_mult_fu_137_ap_ready;
wire   [15:0] grp_mat_mult_fu_137_node_bram_address0;
wire    grp_mat_mult_fu_137_node_bram_ce0;
wire   [14:0] grp_mat_mult_fu_137_wt_address0;
wire    grp_mat_mult_fu_137_wt_ce0;
wire   [3:0] grp_mat_mult_fu_137_res_node_address0;
wire    grp_mat_mult_fu_137_res_node_ce0;
wire    grp_mat_mult_fu_137_res_node_we0;
wire   [31:0] grp_mat_mult_fu_137_res_node_d0;
reg   [31:0] i_reg_115;
reg   [4:0] i1_reg_126;
reg    ap_reg_grp_mat_mult_fu_137_ap_start;
wire   [63:0] tmp_3_fu_202_p1;
reg    edge_strm_V_c0_update;
wire   [31:0] grp_fu_148_p0;
reg    grp_fu_148_ce;
wire   [0:0] ap_CS_fsm_state4;
wire   [0:0] ap_CS_fsm_state5;
wire   [0:0] ap_CS_fsm_state6;
wire   [0:0] ap_CS_fsm_state7;
reg   [10:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'b1;
#0 ap_reg_grp_mat_mult_fu_137_ap_start = 1'b0;
end

edge_proc_res #(
    .DataWidth( 32 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
res_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(res_address0),
    .ce0(res_ce0),
    .we0(res_we0),
    .d0(grp_mat_mult_fu_137_res_node_d0),
    .q0(res_q0)
);

mat_mult grp_mat_mult_fu_137(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_mat_mult_fu_137_ap_start),
    .ap_done(grp_mat_mult_fu_137_ap_done),
    .ap_idle(grp_mat_mult_fu_137_ap_idle),
    .ap_ready(grp_mat_mult_fu_137_ap_ready),
    .node_bram_address0(grp_mat_mult_fu_137_node_bram_address0),
    .node_bram_ce0(grp_mat_mult_fu_137_node_bram_ce0),
    .node_bram_q0(node_bram_q0),
    .edge_src_V(tmp_src_V_reg_220),
    .edge_c(tmp_c_reg_230),
    .wt_address0(grp_mat_mult_fu_137_wt_address0),
    .wt_ce0(grp_mat_mult_fu_137_wt_ce0),
    .wt_q0(wt_q0),
    .res_node_address0(grp_mat_mult_fu_137_res_node_address0),
    .res_node_ce0(grp_mat_mult_fu_137_res_node_ce0),
    .res_node_we0(grp_mat_mult_fu_137_res_node_we0),
    .res_node_d0(grp_mat_mult_fu_137_res_node_d0)
);

top_uitofp_32ns_3fYi #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
top_uitofp_32ns_3fYi_U12(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_148_p0),
    .ce(grp_fu_148_ce),
    .dout(grp_fu_148_p1)
);

always @ (posedge ap_rst or posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_rst or posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_grp_mat_mult_fu_137_ap_start <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state2) & (exitcond5_fu_161_p2 == 1'b0) & ~((exitcond5_fu_161_p2 == 1'b0) & (edge_strm_V_c0_status == 1'b0)))) begin
            ap_reg_grp_mat_mult_fu_137_ap_start <= 1'b1;
        end else if ((1'b1 == grp_mat_mult_fu_137_ap_ready)) begin
            ap_reg_grp_mat_mult_fu_137_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (~(msg_out_strm_V_full_n == 1'b0)) begin
        if ((1'b1 == ap_CS_fsm_state11)) begin
            i1_reg_126 <= i_3_reg_248;
        end else if ((1'b1 == ap_CS_fsm_state9)) begin
            i1_reg_126 <= ap_const_lv5_0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & ~(1'b0 == exitcond_fu_190_p2))) begin
        i_reg_115 <= i_2_reg_215;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        i_reg_115 <= ap_const_lv32_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & ~((exitcond5_fu_161_p2 == 1'b0) & (edge_strm_V_c0_status == 1'b0)))) begin
        i_2_reg_215 <= i_2_fu_166_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        i_3_reg_248 <= i_3_fu_196_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        tmp_7_reg_240 <= grp_fu_148_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond5_fu_161_p2 == 1'b0) & ~((exitcond5_fu_161_p2 == 1'b0) & (edge_strm_V_c0_status == 1'b0)))) begin
        tmp_c_reg_230 <= edge_strm_V_c_dout;
        tmp_dst_V_reg_225 <= edge_strm_V_dst_V_dout;
        tmp_src_V_reg_220 <= edge_strm_V_src_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        tmp_s_reg_207 <= {{metadata[ap_const_lv32_3F : ap_const_lv32_20]}};
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1)) | ((1'b1 == ap_CS_fsm_state2) & ~((exitcond5_fu_161_p2 == 1'b0) & (edge_strm_V_c0_status == 1'b0)) & ~(exitcond5_fu_161_p2 == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & ~((exitcond5_fu_161_p2 == 1'b0) & (edge_strm_V_c0_status == 1'b0)) & ~(exitcond5_fu_161_p2 == 1'b0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond5_fu_161_p2 == 1'b0) & ~((exitcond5_fu_161_p2 == 1'b0) & (edge_strm_V_c0_status == 1'b0)))) begin
        edge_strm_V_c0_update = 1'b1;
    end else begin
        edge_strm_V_c0_update = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond5_fu_161_p2 == 1'b0))) begin
        edge_strm_V_c_blk_n = edge_strm_V_c_empty_n;
    end else begin
        edge_strm_V_c_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond5_fu_161_p2 == 1'b0))) begin
        edge_strm_V_dst_V_blk_n = edge_strm_V_dst_V_empty_n;
    end else begin
        edge_strm_V_dst_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond5_fu_161_p2 == 1'b0))) begin
        edge_strm_V_src_V_blk_n = edge_strm_V_src_V_empty_n;
    end else begin
        edge_strm_V_src_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state3) & ~(1'b0 == grp_mat_mult_fu_137_ap_done)) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state7))) begin
        grp_fu_148_ce = 1'b1;
    end else begin
        grp_fu_148_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state11))) begin
        msg_out_strm_V_blk_n = msg_out_strm_V_full_n;
    end else begin
        msg_out_strm_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (~(msg_out_strm_V_full_n == 1'b0)) begin
        if ((1'b1 == ap_CS_fsm_state11)) begin
            msg_out_strm_V_din = res_q0;
        end else if ((1'b1 == ap_CS_fsm_state9)) begin
            msg_out_strm_V_din = tmp_7_reg_240;
        end else begin
            msg_out_strm_V_din = 'bx;
        end
    end else begin
        msg_out_strm_V_din = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state9) & ~(msg_out_strm_V_full_n == 1'b0)) | ((1'b1 == ap_CS_fsm_state11) & ~(msg_out_strm_V_full_n == 1'b0)))) begin
        msg_out_strm_V_write = 1'b1;
    end else begin
        msg_out_strm_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        res_address0 = tmp_3_fu_202_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        res_address0 = grp_mat_mult_fu_137_res_node_address0;
    end else begin
        res_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        res_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        res_ce0 = grp_mat_mult_fu_137_res_node_ce0;
    end else begin
        res_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        res_we0 = grp_mat_mult_fu_137_res_node_we0;
    end else begin
        res_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((exitcond5_fu_161_p2 == 1'b0) & (edge_strm_V_c0_status == 1'b0)) & ~(exitcond5_fu_161_p2 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((exitcond5_fu_161_p2 == 1'b0) & ~((exitcond5_fu_161_p2 == 1'b0) & (edge_strm_V_c0_status == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (~(1'b0 == grp_mat_mult_fu_137_ap_done)) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (~(msg_out_strm_V_full_n == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if (~(1'b0 == exitcond_fu_190_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            if (~(msg_out_strm_V_full_n == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[ap_const_lv32_0];

assign ap_CS_fsm_state10 = ap_CS_fsm[ap_const_lv32_9];

assign ap_CS_fsm_state11 = ap_CS_fsm[ap_const_lv32_A];

assign ap_CS_fsm_state2 = ap_CS_fsm[ap_const_lv32_1];

assign ap_CS_fsm_state3 = ap_CS_fsm[ap_const_lv32_2];

assign ap_CS_fsm_state4 = ap_CS_fsm[ap_const_lv32_3];

assign ap_CS_fsm_state5 = ap_CS_fsm[ap_const_lv32_4];

assign ap_CS_fsm_state6 = ap_CS_fsm[ap_const_lv32_5];

assign ap_CS_fsm_state7 = ap_CS_fsm[ap_const_lv32_6];

assign ap_CS_fsm_state8 = ap_CS_fsm[ap_const_lv32_7];

assign ap_CS_fsm_state9 = ap_CS_fsm[ap_const_lv32_8];

assign edge_strm_V_c0_status = (edge_strm_V_src_V_empty_n & edge_strm_V_dst_V_empty_n & edge_strm_V_c_empty_n);

assign edge_strm_V_c_read = edge_strm_V_c0_update;

assign edge_strm_V_dst_V_read = edge_strm_V_c0_update;

assign edge_strm_V_src_V_read = edge_strm_V_c0_update;

assign exitcond5_fu_161_p2 = ((i_reg_115 == tmp_s_reg_207) ? 1'b1 : 1'b0);

assign exitcond_fu_190_p2 = ((i1_reg_126 == ap_const_lv5_10) ? 1'b1 : 1'b0);

assign grp_fu_148_p0 = tmp_dst_V_reg_225;

assign grp_mat_mult_fu_137_ap_start = ap_reg_grp_mat_mult_fu_137_ap_start;

assign i_2_fu_166_p2 = (i_reg_115 + ap_const_lv32_1);

assign i_3_fu_196_p2 = (i1_reg_126 + ap_const_lv5_1);

assign node_bram_address0 = grp_mat_mult_fu_137_node_bram_address0;

assign node_bram_ce0 = grp_mat_mult_fu_137_node_bram_ce0;

assign tmp_3_fu_202_p1 = i1_reg_126;

assign wt_address0 = grp_mat_mult_fu_137_wt_address0;

assign wt_ce0 = grp_mat_mult_fu_137_wt_ce0;

endmodule //edge_proc
