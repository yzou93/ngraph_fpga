// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dataflow_in_loop_gat (
        node_bram_address0,
        node_bram_ce0,
        node_bram_d0,
        node_bram_q0,
        node_bram_we0,
        node_bram_address1,
        node_bram_ce1,
        node_bram_d1,
        node_bram_q1,
        node_bram_we1,
        metadata_strm_V_dout,
        metadata_strm_V_empty_n,
        metadata_strm_V_read,
        msg_in_strm_V_dout,
        msg_in_strm_V_empty_n,
        msg_in_strm_V_read,
        node_out_strm_V_din,
        node_out_strm_V_full_n,
        node_out_strm_V_write,
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_ready,
        ap_idle,
        ap_continue
);

parameter    ap_const_lv16_0 = 16'b0000000000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv2_1 = 2'b1;

output  [15:0] node_bram_address0;
output   node_bram_ce0;
output  [31:0] node_bram_d0;
input  [31:0] node_bram_q0;
output   node_bram_we0;
output  [15:0] node_bram_address1;
output   node_bram_ce1;
output  [31:0] node_bram_d1;
input  [31:0] node_bram_q1;
output   node_bram_we1;
input  [63:0] metadata_strm_V_dout;
input   metadata_strm_V_empty_n;
output   metadata_strm_V_read;
input  [31:0] msg_in_strm_V_dout;
input   msg_in_strm_V_empty_n;
output   msg_in_strm_V_read;
output  [31:0] node_out_strm_V_din;
input   node_out_strm_V_full_n;
output   node_out_strm_V_write;
input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_ready;
output   ap_idle;
input   ap_continue;

wire    clear_outer_proc_U0_ap_start;
wire    clear_outer_proc_U0_ap_done;
wire    clear_outer_proc_U0_ap_continue;
wire    clear_outer_proc_U0_ap_idle;
wire    clear_outer_proc_U0_ap_ready;
wire   [15:0] clear_outer_proc_U0_node_bram_address1;
wire    clear_outer_proc_U0_node_bram_ce1;
wire    clear_outer_proc_U0_node_bram_we1;
wire   [31:0] clear_outer_proc_U0_node_bram_d1;
wire    ap_hs_continue;
wire    gather_inner_proc_U0_ap_start;
wire    gather_inner_proc_U0_ap_done;
wire    gather_inner_proc_U0_ap_continue;
wire    gather_inner_proc_U0_ap_idle;
wire    gather_inner_proc_U0_ap_ready;
wire    gather_inner_proc_U0_metadata_strm_V_read;
wire   [15:0] gather_inner_proc_U0_node_bram_address0;
wire    gather_inner_proc_U0_node_bram_ce0;
wire   [15:0] gather_inner_proc_U0_node_bram_address1;
wire    gather_inner_proc_U0_node_bram_ce1;
wire    gather_inner_proc_U0_node_bram_we1;
wire   [31:0] gather_inner_proc_U0_node_bram_d1;
wire    gather_inner_proc_U0_msg_in_strm_V_read;
wire    node_store_U0_ap_start;
wire    node_store_U0_ap_done;
wire    node_store_U0_ap_continue;
wire    node_store_U0_ap_idle;
wire    node_store_U0_ap_ready;
wire   [15:0] node_store_U0_node_bram_address0;
wire    node_store_U0_node_bram_ce0;
wire   [31:0] node_store_U0_node_out_strm_V_din;
wire    node_store_U0_node_out_strm_V_write;
wire    ap_hs_done;
reg    ap_reg_clear_outer_proc_U0_ap_done;
reg    ap_reg_gather_inner_proc_U0_ap_done;
reg    ap_reg_node_store_U0_ap_done;
wire    ap_hs_ready;
reg    ap_sync_reg_clear_outer_proc_U0_ap_ready;
wire    ap_sync_clear_outer_proc_U0_ap_ready;
reg   [1:0] clear_outer_proc_U0_ap_ready_count;
reg    ap_sync_reg_gather_inner_proc_U0_ap_ready;
wire    ap_sync_gather_inner_proc_U0_ap_ready;
reg   [1:0] gather_inner_proc_U0_ap_ready_count;
reg    ap_sync_reg_node_store_U0_ap_ready;
wire    ap_sync_node_store_U0_ap_ready;
reg   [1:0] node_store_U0_ap_ready_count;
wire    ap_sync_clear_outer_proc_U0_ap_start;
wire    ap_sync_gather_inner_proc_U0_ap_start;
wire    ap_sync_node_store_U0_ap_start;

// power-on initialization
initial begin
#0 ap_reg_clear_outer_proc_U0_ap_done = 1'b0;
#0 ap_reg_gather_inner_proc_U0_ap_done = 1'b0;
#0 ap_reg_node_store_U0_ap_done = 1'b0;
#0 ap_sync_reg_clear_outer_proc_U0_ap_ready = 1'b0;
#0 clear_outer_proc_U0_ap_ready_count = 2'b00;
#0 ap_sync_reg_gather_inner_proc_U0_ap_ready = 1'b0;
#0 gather_inner_proc_U0_ap_ready_count = 2'b00;
#0 ap_sync_reg_node_store_U0_ap_ready = 1'b0;
#0 node_store_U0_ap_ready_count = 2'b00;
end

clear_outer_proc clear_outer_proc_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(clear_outer_proc_U0_ap_start),
    .ap_done(clear_outer_proc_U0_ap_done),
    .ap_continue(clear_outer_proc_U0_ap_continue),
    .ap_idle(clear_outer_proc_U0_ap_idle),
    .ap_ready(clear_outer_proc_U0_ap_ready),
    .node_bram_address1(clear_outer_proc_U0_node_bram_address1),
    .node_bram_ce1(clear_outer_proc_U0_node_bram_ce1),
    .node_bram_we1(clear_outer_proc_U0_node_bram_we1),
    .node_bram_d1(clear_outer_proc_U0_node_bram_d1)
);

gather_inner_proc gather_inner_proc_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(gather_inner_proc_U0_ap_start),
    .ap_done(gather_inner_proc_U0_ap_done),
    .ap_continue(gather_inner_proc_U0_ap_continue),
    .ap_idle(gather_inner_proc_U0_ap_idle),
    .ap_ready(gather_inner_proc_U0_ap_ready),
    .metadata_strm_V_dout(metadata_strm_V_dout),
    .metadata_strm_V_empty_n(metadata_strm_V_empty_n),
    .metadata_strm_V_read(gather_inner_proc_U0_metadata_strm_V_read),
    .node_bram_address0(gather_inner_proc_U0_node_bram_address0),
    .node_bram_ce0(gather_inner_proc_U0_node_bram_ce0),
    .node_bram_q0(node_bram_q0),
    .node_bram_address1(gather_inner_proc_U0_node_bram_address1),
    .node_bram_ce1(gather_inner_proc_U0_node_bram_ce1),
    .node_bram_we1(gather_inner_proc_U0_node_bram_we1),
    .node_bram_d1(gather_inner_proc_U0_node_bram_d1),
    .msg_in_strm_V_dout(msg_in_strm_V_dout),
    .msg_in_strm_V_empty_n(msg_in_strm_V_empty_n),
    .msg_in_strm_V_read(gather_inner_proc_U0_msg_in_strm_V_read)
);

node_store node_store_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(node_store_U0_ap_start),
    .ap_done(node_store_U0_ap_done),
    .ap_continue(node_store_U0_ap_continue),
    .ap_idle(node_store_U0_ap_idle),
    .ap_ready(node_store_U0_ap_ready),
    .node_bram_address0(node_store_U0_node_bram_address0),
    .node_bram_ce0(node_store_U0_node_bram_ce0),
    .node_bram_q0(node_bram_q0),
    .node_out_strm_V_din(node_store_U0_node_out_strm_V_din),
    .node_out_strm_V_full_n(node_out_strm_V_full_n),
    .node_out_strm_V_write(node_store_U0_node_out_strm_V_write)
);

always @ (posedge ap_rst or posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_clear_outer_proc_U0_ap_done <= 1'b0;
    end else begin
        if ((1'b1 == ap_hs_done)) begin
            ap_reg_clear_outer_proc_U0_ap_done <= 1'b0;
        end else begin
            ap_reg_clear_outer_proc_U0_ap_done <= (clear_outer_proc_U0_ap_done | ap_reg_clear_outer_proc_U0_ap_done);
        end
    end
end

always @ (posedge ap_rst or posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_gather_inner_proc_U0_ap_done <= 1'b0;
    end else begin
        if ((1'b1 == ap_hs_done)) begin
            ap_reg_gather_inner_proc_U0_ap_done <= 1'b0;
        end else begin
            ap_reg_gather_inner_proc_U0_ap_done <= (gather_inner_proc_U0_ap_done | ap_reg_gather_inner_proc_U0_ap_done);
        end
    end
end

always @ (posedge ap_rst or posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_node_store_U0_ap_done <= 1'b0;
    end else begin
        if ((1'b1 == ap_hs_done)) begin
            ap_reg_node_store_U0_ap_done <= 1'b0;
        end else begin
            ap_reg_node_store_U0_ap_done <= (node_store_U0_ap_done | ap_reg_node_store_U0_ap_done);
        end
    end
end

always @ (posedge ap_rst or posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_clear_outer_proc_U0_ap_ready <= 1'b0;
    end else begin
        if ((1'b1 == (ap_start & ap_hs_ready))) begin
            ap_sync_reg_clear_outer_proc_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_clear_outer_proc_U0_ap_ready <= ap_sync_clear_outer_proc_U0_ap_ready;
        end
    end
end

always @ (posedge ap_rst or posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_gather_inner_proc_U0_ap_ready <= 1'b0;
    end else begin
        if ((1'b1 == (ap_start & ap_hs_ready))) begin
            ap_sync_reg_gather_inner_proc_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_gather_inner_proc_U0_ap_ready <= ap_sync_gather_inner_proc_U0_ap_ready;
        end
    end
end

always @ (posedge ap_rst or posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_node_store_U0_ap_ready <= 1'b0;
    end else begin
        if ((1'b1 == (ap_start & ap_hs_ready))) begin
            ap_sync_reg_node_store_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_node_store_U0_ap_ready <= ap_sync_node_store_U0_ap_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == clear_outer_proc_U0_ap_ready) & (1'b1 == ap_hs_ready))) begin
        clear_outer_proc_U0_ap_ready_count <= (clear_outer_proc_U0_ap_ready_count - ap_const_lv2_1);
    end else if (((clear_outer_proc_U0_ap_ready == 1'b1) & (1'b0 == ap_hs_ready))) begin
        clear_outer_proc_U0_ap_ready_count <= (clear_outer_proc_U0_ap_ready_count + ap_const_lv2_1);
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_hs_ready) & (1'b0 == gather_inner_proc_U0_ap_ready))) begin
        gather_inner_proc_U0_ap_ready_count <= (gather_inner_proc_U0_ap_ready_count - ap_const_lv2_1);
    end else if (((1'b0 == ap_hs_ready) & (gather_inner_proc_U0_ap_ready == 1'b1))) begin
        gather_inner_proc_U0_ap_ready_count <= (gather_inner_proc_U0_ap_ready_count + ap_const_lv2_1);
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_hs_ready) & (1'b0 == node_store_U0_ap_ready))) begin
        node_store_U0_ap_ready_count <= (node_store_U0_ap_ready_count - ap_const_lv2_1);
    end else if (((1'b0 == ap_hs_ready) & (1'b1 == node_store_U0_ap_ready))) begin
        node_store_U0_ap_ready_count <= (node_store_U0_ap_ready_count + ap_const_lv2_1);
    end
end

assign ap_done = ap_hs_done;

assign ap_hs_continue = ap_continue;

assign ap_hs_done = (ap_reg_clear_outer_proc_U0_ap_done & ap_reg_gather_inner_proc_U0_ap_done & ap_reg_node_store_U0_ap_done);

assign ap_hs_ready = (ap_sync_clear_outer_proc_U0_ap_ready & ap_sync_gather_inner_proc_U0_ap_ready & ap_sync_node_store_U0_ap_ready);

assign ap_idle = (clear_outer_proc_U0_ap_idle & gather_inner_proc_U0_ap_idle & node_store_U0_ap_idle);

assign ap_ready = ap_hs_ready;

assign ap_sync_clear_outer_proc_U0_ap_ready = (clear_outer_proc_U0_ap_ready | ap_sync_reg_clear_outer_proc_U0_ap_ready);

assign ap_sync_clear_outer_proc_U0_ap_start = (ap_start & (ap_sync_reg_clear_outer_proc_U0_ap_ready ^ 1'b1));

assign ap_sync_gather_inner_proc_U0_ap_ready = (gather_inner_proc_U0_ap_ready | ap_sync_reg_gather_inner_proc_U0_ap_ready);

assign ap_sync_gather_inner_proc_U0_ap_start = (ap_start & (ap_sync_reg_gather_inner_proc_U0_ap_ready ^ 1'b1));

assign ap_sync_node_store_U0_ap_ready = (node_store_U0_ap_ready | ap_sync_reg_node_store_U0_ap_ready);

assign ap_sync_node_store_U0_ap_start = (ap_start & (ap_sync_reg_node_store_U0_ap_ready ^ 1'b1));

assign clear_outer_proc_U0_ap_continue = ap_continue;

assign clear_outer_proc_U0_ap_start = ap_sync_clear_outer_proc_U0_ap_start;

assign gather_inner_proc_U0_ap_continue = 1'b1;

assign gather_inner_proc_U0_ap_start = ap_sync_gather_inner_proc_U0_ap_start;

assign metadata_strm_V_read = gather_inner_proc_U0_metadata_strm_V_read;

assign msg_in_strm_V_read = gather_inner_proc_U0_msg_in_strm_V_read;

assign node_bram_address0 = node_store_U0_node_bram_address0;

assign node_bram_address1 = gather_inner_proc_U0_node_bram_address1;

assign node_bram_ce0 = node_store_U0_node_bram_ce0;

assign node_bram_ce1 = gather_inner_proc_U0_node_bram_ce1;

assign node_bram_d0 = ap_const_lv32_0;

assign node_bram_d1 = gather_inner_proc_U0_node_bram_d1;

assign node_bram_we0 = 1'b0;

assign node_bram_we1 = gather_inner_proc_U0_node_bram_we1;

assign node_out_strm_V_din = node_store_U0_node_out_strm_V_din;

assign node_out_strm_V_write = node_store_U0_node_out_strm_V_write;

assign node_store_U0_ap_continue = ap_continue;

assign node_store_U0_ap_start = ap_sync_node_store_U0_ap_start;

endmodule //dataflow_in_loop_gat
