// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module clear_outer_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        node_bram_address1,
        node_bram_ce1,
        node_bram_we1,
        node_bram_d1
);

parameter    ap_ST_fsm_state1 = 18'b1;
parameter    ap_ST_fsm_state2 = 18'b10;
parameter    ap_ST_fsm_state3 = 18'b100;
parameter    ap_ST_fsm_state4 = 18'b1000;
parameter    ap_ST_fsm_state5 = 18'b10000;
parameter    ap_ST_fsm_state6 = 18'b100000;
parameter    ap_ST_fsm_state7 = 18'b1000000;
parameter    ap_ST_fsm_state8 = 18'b10000000;
parameter    ap_ST_fsm_state9 = 18'b100000000;
parameter    ap_ST_fsm_state10 = 18'b1000000000;
parameter    ap_ST_fsm_state11 = 18'b10000000000;
parameter    ap_ST_fsm_state12 = 18'b100000000000;
parameter    ap_ST_fsm_state13 = 18'b1000000000000;
parameter    ap_ST_fsm_state14 = 18'b10000000000000;
parameter    ap_ST_fsm_state15 = 18'b100000000000000;
parameter    ap_ST_fsm_state16 = 18'b1000000000000000;
parameter    ap_ST_fsm_state17 = 18'b10000000000000000;
parameter    ap_ST_fsm_state18 = 18'b100000000000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_F = 32'b1111;
parameter    ap_const_lv6_0 = 6'b000000;
parameter    ap_const_lv32_10 = 32'b10000;
parameter    ap_const_lv16_0 = 16'b0000000000000000;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv32_9 = 32'b1001;
parameter    ap_const_lv32_A = 32'b1010;
parameter    ap_const_lv32_B = 32'b1011;
parameter    ap_const_lv32_C = 32'b1100;
parameter    ap_const_lv32_D = 32'b1101;
parameter    ap_const_lv32_E = 32'b1110;
parameter    ap_const_lv6_20 = 6'b100000;
parameter    ap_const_lv6_1 = 6'b1;
parameter    ap_const_lv16_1 = 16'b1;
parameter    ap_const_lv16_2 = 16'b10;
parameter    ap_const_lv16_3 = 16'b11;
parameter    ap_const_lv16_4 = 16'b100;
parameter    ap_const_lv16_5 = 16'b101;
parameter    ap_const_lv16_6 = 16'b110;
parameter    ap_const_lv16_7 = 16'b111;
parameter    ap_const_lv16_8 = 16'b1000;
parameter    ap_const_lv16_9 = 16'b1001;
parameter    ap_const_lv16_A = 16'b1010;
parameter    ap_const_lv16_B = 16'b1011;
parameter    ap_const_lv16_C = 16'b1100;
parameter    ap_const_lv16_D = 16'b1101;
parameter    ap_const_lv16_599 = 16'b10110011001;
parameter    ap_const_lv16_E = 16'b1110;
parameter    ap_const_lv16_F = 16'b1111;
parameter    ap_const_lv32_11 = 32'b10001;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [15:0] node_bram_address1;
output   node_bram_ce1;
output   node_bram_we1;
output  [31:0] node_bram_d1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[15:0] node_bram_address1;
reg node_bram_ce1;
reg node_bram_we1;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [17:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
wire   [5:0] row_1_fu_242_p2;
reg   [5:0] row_1_reg_421;
wire   [0:0] ap_CS_fsm_state2;
wire   [15:0] next_mul_fu_391_p2;
reg   [15:0] next_mul_reg_426;
wire   [0:0] ap_CS_fsm_state16;
wire   [15:0] tmp_26_fu_408_p2;
reg   [15:0] tmp_26_reg_431;
reg   [5:0] row_reg_208;
wire   [0:0] ap_CS_fsm_state17;
reg   [15:0] phi_mul_reg_219;
wire   [63:0] phi_mul_cast_fu_231_p1;
wire   [0:0] exitcond4_fu_236_p2;
wire   [63:0] tmp_20_cast_fu_254_p1;
wire   [0:0] ap_CS_fsm_state3;
wire   [63:0] tmp_21_cast_fu_265_p1;
wire   [0:0] ap_CS_fsm_state4;
wire   [63:0] tmp_22_cast_fu_276_p1;
wire   [0:0] ap_CS_fsm_state5;
wire   [63:0] tmp_23_cast_fu_287_p1;
wire   [0:0] ap_CS_fsm_state6;
wire   [63:0] tmp_24_cast_fu_298_p1;
wire   [0:0] ap_CS_fsm_state7;
wire   [63:0] tmp_25_cast_fu_309_p1;
wire   [0:0] ap_CS_fsm_state8;
wire   [63:0] tmp_26_cast_fu_320_p1;
wire   [0:0] ap_CS_fsm_state9;
wire   [63:0] tmp_27_cast_fu_331_p1;
wire   [0:0] ap_CS_fsm_state10;
wire   [63:0] tmp_28_cast_fu_342_p1;
wire   [0:0] ap_CS_fsm_state11;
wire   [63:0] tmp_29_cast_fu_353_p1;
wire   [0:0] ap_CS_fsm_state12;
wire   [63:0] tmp_30_cast_fu_364_p1;
wire   [0:0] ap_CS_fsm_state13;
wire   [63:0] tmp_31_cast_fu_375_p1;
wire   [0:0] ap_CS_fsm_state14;
wire   [63:0] tmp_32_cast_fu_386_p1;
wire   [0:0] ap_CS_fsm_state15;
wire   [63:0] tmp_33_cast_fu_403_p1;
wire   [63:0] tmp_34_cast_fu_414_p1;
wire   [15:0] tmp_s_fu_248_p2;
wire   [15:0] tmp_13_fu_259_p2;
wire   [15:0] tmp_14_fu_270_p2;
wire   [15:0] tmp_15_fu_281_p2;
wire   [15:0] tmp_16_fu_292_p2;
wire   [15:0] tmp_17_fu_303_p2;
wire   [15:0] tmp_18_fu_314_p2;
wire   [15:0] tmp_19_fu_325_p2;
wire   [15:0] tmp_20_fu_336_p2;
wire   [15:0] tmp_21_fu_347_p2;
wire   [15:0] tmp_22_fu_358_p2;
wire   [15:0] tmp_23_fu_369_p2;
wire   [15:0] tmp_24_fu_380_p2;
wire   [15:0] tmp_25_fu_397_p2;
wire   [0:0] ap_CS_fsm_state18;
reg   [17:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 18'b1;
end

always @ (posedge ap_rst or posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_rst or posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_continue)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state18)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        phi_mul_reg_219 <= next_mul_reg_426;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~((ap_start == 1'b0) | (ap_done_reg == 1'b1)))) begin
        phi_mul_reg_219 <= ap_const_lv16_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        row_reg_208 <= row_1_reg_421;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~((ap_start == 1'b0) | (ap_done_reg == 1'b1)))) begin
        row_reg_208 <= ap_const_lv6_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        next_mul_reg_426 <= next_mul_fu_391_p2;
        tmp_26_reg_431 <= tmp_26_fu_408_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        row_1_reg_421 <= row_1_fu_242_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_done_reg) | (1'b1 == ap_CS_fsm_state18))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        node_bram_address1 = tmp_34_cast_fu_414_p1;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        node_bram_address1 = tmp_33_cast_fu_403_p1;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        node_bram_address1 = tmp_32_cast_fu_386_p1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        node_bram_address1 = tmp_31_cast_fu_375_p1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        node_bram_address1 = tmp_30_cast_fu_364_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        node_bram_address1 = tmp_29_cast_fu_353_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        node_bram_address1 = tmp_28_cast_fu_342_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        node_bram_address1 = tmp_27_cast_fu_331_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        node_bram_address1 = tmp_26_cast_fu_320_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        node_bram_address1 = tmp_25_cast_fu_309_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        node_bram_address1 = tmp_24_cast_fu_298_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        node_bram_address1 = tmp_23_cast_fu_287_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        node_bram_address1 = tmp_22_cast_fu_276_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        node_bram_address1 = tmp_21_cast_fu_265_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        node_bram_address1 = tmp_20_cast_fu_254_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        node_bram_address1 = phi_mul_cast_fu_231_p1;
    end else begin
        node_bram_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state15))) begin
        node_bram_ce1 = 1'b1;
    end else begin
        node_bram_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state17) | ((1'b1 == ap_CS_fsm_state2) & (exitcond4_fu_236_p2 == 1'b0)) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state15))) begin
        node_bram_we1 = 1'b1;
    end else begin
        node_bram_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (~((ap_start == 1'b0) | (ap_done_reg == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((exitcond4_fu_236_p2 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[ap_const_lv32_0];

assign ap_CS_fsm_state10 = ap_CS_fsm[ap_const_lv32_9];

assign ap_CS_fsm_state11 = ap_CS_fsm[ap_const_lv32_A];

assign ap_CS_fsm_state12 = ap_CS_fsm[ap_const_lv32_B];

assign ap_CS_fsm_state13 = ap_CS_fsm[ap_const_lv32_C];

assign ap_CS_fsm_state14 = ap_CS_fsm[ap_const_lv32_D];

assign ap_CS_fsm_state15 = ap_CS_fsm[ap_const_lv32_E];

assign ap_CS_fsm_state16 = ap_CS_fsm[ap_const_lv32_F];

assign ap_CS_fsm_state17 = ap_CS_fsm[ap_const_lv32_10];

assign ap_CS_fsm_state18 = ap_CS_fsm[ap_const_lv32_11];

assign ap_CS_fsm_state2 = ap_CS_fsm[ap_const_lv32_1];

assign ap_CS_fsm_state3 = ap_CS_fsm[ap_const_lv32_2];

assign ap_CS_fsm_state4 = ap_CS_fsm[ap_const_lv32_3];

assign ap_CS_fsm_state5 = ap_CS_fsm[ap_const_lv32_4];

assign ap_CS_fsm_state6 = ap_CS_fsm[ap_const_lv32_5];

assign ap_CS_fsm_state7 = ap_CS_fsm[ap_const_lv32_6];

assign ap_CS_fsm_state8 = ap_CS_fsm[ap_const_lv32_7];

assign ap_CS_fsm_state9 = ap_CS_fsm[ap_const_lv32_8];

assign exitcond4_fu_236_p2 = ((row_reg_208 == ap_const_lv6_20) ? 1'b1 : 1'b0);

assign next_mul_fu_391_p2 = (phi_mul_reg_219 + ap_const_lv16_599);

assign node_bram_d1 = ap_const_lv32_0;

assign phi_mul_cast_fu_231_p1 = phi_mul_reg_219;

assign row_1_fu_242_p2 = (row_reg_208 + ap_const_lv6_1);

assign tmp_13_fu_259_p2 = (phi_mul_reg_219 + ap_const_lv16_2);

assign tmp_14_fu_270_p2 = (phi_mul_reg_219 + ap_const_lv16_3);

assign tmp_15_fu_281_p2 = (phi_mul_reg_219 + ap_const_lv16_4);

assign tmp_16_fu_292_p2 = (phi_mul_reg_219 + ap_const_lv16_5);

assign tmp_17_fu_303_p2 = (phi_mul_reg_219 + ap_const_lv16_6);

assign tmp_18_fu_314_p2 = (phi_mul_reg_219 + ap_const_lv16_7);

assign tmp_19_fu_325_p2 = (phi_mul_reg_219 + ap_const_lv16_8);

assign tmp_20_cast_fu_254_p1 = tmp_s_fu_248_p2;

assign tmp_20_fu_336_p2 = (phi_mul_reg_219 + ap_const_lv16_9);

assign tmp_21_cast_fu_265_p1 = tmp_13_fu_259_p2;

assign tmp_21_fu_347_p2 = (phi_mul_reg_219 + ap_const_lv16_A);

assign tmp_22_cast_fu_276_p1 = tmp_14_fu_270_p2;

assign tmp_22_fu_358_p2 = (phi_mul_reg_219 + ap_const_lv16_B);

assign tmp_23_cast_fu_287_p1 = tmp_15_fu_281_p2;

assign tmp_23_fu_369_p2 = (phi_mul_reg_219 + ap_const_lv16_C);

assign tmp_24_cast_fu_298_p1 = tmp_16_fu_292_p2;

assign tmp_24_fu_380_p2 = (phi_mul_reg_219 + ap_const_lv16_D);

assign tmp_25_cast_fu_309_p1 = tmp_17_fu_303_p2;

assign tmp_25_fu_397_p2 = (phi_mul_reg_219 + ap_const_lv16_E);

assign tmp_26_cast_fu_320_p1 = tmp_18_fu_314_p2;

assign tmp_26_fu_408_p2 = (phi_mul_reg_219 + ap_const_lv16_F);

assign tmp_27_cast_fu_331_p1 = tmp_19_fu_325_p2;

assign tmp_28_cast_fu_342_p1 = tmp_20_fu_336_p2;

assign tmp_29_cast_fu_353_p1 = tmp_21_fu_347_p2;

assign tmp_30_cast_fu_364_p1 = tmp_22_fu_358_p2;

assign tmp_31_cast_fu_375_p1 = tmp_23_fu_369_p2;

assign tmp_32_cast_fu_386_p1 = tmp_24_fu_380_p2;

assign tmp_33_cast_fu_403_p1 = tmp_25_fu_397_p2;

assign tmp_34_cast_fu_414_p1 = tmp_26_reg_431;

assign tmp_s_fu_248_p2 = (phi_mul_reg_219 + ap_const_lv16_1);

endmodule //clear_outer_proc
