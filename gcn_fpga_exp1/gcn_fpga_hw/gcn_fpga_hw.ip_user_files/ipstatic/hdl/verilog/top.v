// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="top,hls_ip_2016_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k325tffg900-2,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.454000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=384,HLS_SYN_DSP=9,HLS_SYN_FF=3095,HLS_SYN_LUT=3443}" *)

module top (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        node_in_strm_V_dout,
        node_in_strm_V_empty_n,
        node_in_strm_V_read,
        edge_strm_V_src_V_dout,
        edge_strm_V_src_V_empty_n,
        edge_strm_V_src_V_read,
        edge_strm_V_dst_V_dout,
        edge_strm_V_dst_V_empty_n,
        edge_strm_V_dst_V_read,
        edge_strm_V_c_dout,
        edge_strm_V_c_empty_n,
        edge_strm_V_c_read,
        metadata_strm_V_dout,
        metadata_strm_V_empty_n,
        metadata_strm_V_read,
        msg_out_strm_V_din,
        msg_out_strm_V_full_n,
        msg_out_strm_V_write,
        msg_in_strm_V_dout,
        msg_in_strm_V_empty_n,
        msg_in_strm_V_read,
        node_out_strm_V_din,
        node_out_strm_V_full_n,
        node_out_strm_V_write,
        wt_address0,
        wt_ce0,
        wt_q0
);

parameter    ap_ST_fsm_state1 = 4'b1;
parameter    ap_ST_fsm_state2 = 4'b10;
parameter    ap_ST_fsm_state3 = 4'b100;
parameter    ap_ST_fsm_state4 = 4'b1000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_3 = 32'b11;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] node_in_strm_V_dout;
input   node_in_strm_V_empty_n;
output   node_in_strm_V_read;
input  [11:0] edge_strm_V_src_V_dout;
input   edge_strm_V_src_V_empty_n;
output   edge_strm_V_src_V_read;
input  [11:0] edge_strm_V_dst_V_dout;
input   edge_strm_V_dst_V_empty_n;
output   edge_strm_V_dst_V_read;
input  [31:0] edge_strm_V_c_dout;
input   edge_strm_V_c_empty_n;
output   edge_strm_V_c_read;
input  [63:0] metadata_strm_V_dout;
input   metadata_strm_V_empty_n;
output   metadata_strm_V_read;
output  [31:0] msg_out_strm_V_din;
input   msg_out_strm_V_full_n;
output   msg_out_strm_V_write;
input  [31:0] msg_in_strm_V_dout;
input   msg_in_strm_V_empty_n;
output   msg_in_strm_V_read;
output  [31:0] node_out_strm_V_din;
input   node_out_strm_V_full_n;
output   node_out_strm_V_write;
output  [14:0] wt_address0;
output   wt_ce0;
input  [31:0] wt_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg node_in_strm_V_read;
reg edge_strm_V_src_V_read;
reg edge_strm_V_dst_V_read;
reg edge_strm_V_c_read;
reg metadata_strm_V_read;
reg msg_out_strm_V_write;
reg msg_in_strm_V_read;
reg node_out_strm_V_write;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
reg   [15:0] node_bram_address0;
reg    node_bram_ce0;
wire   [31:0] node_bram_q0;
reg   [15:0] node_bram_address1;
reg    node_bram_ce1;
reg    node_bram_we1;
reg   [31:0] node_bram_d1;
wire    grp_dataflow_parent_loop_2_fu_58_node_in_strm_V_read;
wire   [15:0] grp_dataflow_parent_loop_2_fu_58_node_bram_address0;
wire    grp_dataflow_parent_loop_2_fu_58_node_bram_ce0;
wire   [31:0] grp_dataflow_parent_loop_2_fu_58_node_bram_d0;
wire    grp_dataflow_parent_loop_2_fu_58_node_bram_we0;
wire   [15:0] grp_dataflow_parent_loop_2_fu_58_node_bram_address1;
wire    grp_dataflow_parent_loop_2_fu_58_node_bram_ce1;
wire   [31:0] grp_dataflow_parent_loop_2_fu_58_node_bram_d1;
wire    grp_dataflow_parent_loop_2_fu_58_node_bram_we1;
wire    grp_dataflow_parent_loop_2_fu_58_metadata_strm_V_read;
wire    grp_dataflow_parent_loop_2_fu_58_edge_strm_V_src_V_read;
wire    grp_dataflow_parent_loop_2_fu_58_edge_strm_V_dst_V_read;
wire    grp_dataflow_parent_loop_2_fu_58_edge_strm_V_c_read;
wire   [31:0] grp_dataflow_parent_loop_2_fu_58_msg_out_strm_V_din;
wire    grp_dataflow_parent_loop_2_fu_58_msg_out_strm_V_write;
wire   [14:0] grp_dataflow_parent_loop_2_fu_58_wt_address0;
wire    grp_dataflow_parent_loop_2_fu_58_wt_ce0;
wire   [31:0] grp_dataflow_parent_loop_2_fu_58_wt_d0;
wire    grp_dataflow_parent_loop_2_fu_58_wt_we0;
wire    grp_dataflow_parent_loop_2_fu_58_ap_done;
wire    grp_dataflow_parent_loop_2_fu_58_ap_start;
wire    grp_dataflow_parent_loop_2_fu_58_ap_ready;
wire    grp_dataflow_parent_loop_2_fu_58_ap_idle;
reg    grp_dataflow_parent_loop_2_fu_58_ap_continue;
wire   [15:0] grp_dataflow_parent_loop_1_fu_78_node_bram_address0;
wire    grp_dataflow_parent_loop_1_fu_78_node_bram_ce0;
wire   [31:0] grp_dataflow_parent_loop_1_fu_78_node_bram_d0;
wire    grp_dataflow_parent_loop_1_fu_78_node_bram_we0;
wire   [15:0] grp_dataflow_parent_loop_1_fu_78_node_bram_address1;
wire    grp_dataflow_parent_loop_1_fu_78_node_bram_ce1;
wire   [31:0] grp_dataflow_parent_loop_1_fu_78_node_bram_d1;
wire    grp_dataflow_parent_loop_1_fu_78_node_bram_we1;
wire    grp_dataflow_parent_loop_1_fu_78_metadata_strm_V_read;
wire    grp_dataflow_parent_loop_1_fu_78_msg_in_strm_V_read;
wire   [31:0] grp_dataflow_parent_loop_1_fu_78_node_out_strm_V_din;
wire    grp_dataflow_parent_loop_1_fu_78_node_out_strm_V_write;
wire    grp_dataflow_parent_loop_1_fu_78_ap_done;
wire    grp_dataflow_parent_loop_1_fu_78_ap_start;
wire    grp_dataflow_parent_loop_1_fu_78_ap_ready;
wire    grp_dataflow_parent_loop_1_fu_78_ap_idle;
reg    grp_dataflow_parent_loop_1_fu_78_ap_continue;
reg    ap_reg_grp_dataflow_parent_loop_2_fu_58_ap_start;
wire   [0:0] ap_CS_fsm_state2;
reg    ap_sync_reg_grp_dataflow_parent_loop_2_fu_58_ap_ready;
reg    ap_sync_grp_dataflow_parent_loop_2_fu_58_ap_ready;
reg    ap_reg_grp_dataflow_parent_loop_1_fu_78_ap_start;
wire   [0:0] ap_CS_fsm_state3;
wire   [0:0] ap_CS_fsm_state4;
reg    ap_sync_reg_grp_dataflow_parent_loop_1_fu_78_ap_ready;
reg    ap_sync_grp_dataflow_parent_loop_1_fu_78_ap_ready;
reg   [3:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'b1;
#0 ap_reg_grp_dataflow_parent_loop_2_fu_58_ap_start = 1'b0;
#0 ap_sync_reg_grp_dataflow_parent_loop_2_fu_58_ap_ready = 1'b0;
#0 ap_reg_grp_dataflow_parent_loop_1_fu_78_ap_start = 1'b0;
#0 ap_sync_reg_grp_dataflow_parent_loop_1_fu_78_ap_ready = 1'b0;
end

dataflow_in_loop_g8j #(
    .DataWidth( 32 ),
    .AddressRange( 45856 ),
    .AddressWidth( 16 ))
node_bram_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(node_bram_address0),
    .ce0(node_bram_ce0),
    .q0(node_bram_q0),
    .address1(node_bram_address1),
    .ce1(node_bram_ce1),
    .we1(node_bram_we1),
    .d1(node_bram_d1)
);

dataflow_parent_loop_2 grp_dataflow_parent_loop_2_fu_58(
    .node_in_strm_V_dout(node_in_strm_V_dout),
    .node_in_strm_V_empty_n(node_in_strm_V_empty_n),
    .node_in_strm_V_read(grp_dataflow_parent_loop_2_fu_58_node_in_strm_V_read),
    .node_bram_address0(grp_dataflow_parent_loop_2_fu_58_node_bram_address0),
    .node_bram_ce0(grp_dataflow_parent_loop_2_fu_58_node_bram_ce0),
    .node_bram_d0(grp_dataflow_parent_loop_2_fu_58_node_bram_d0),
    .node_bram_q0(node_bram_q0),
    .node_bram_we0(grp_dataflow_parent_loop_2_fu_58_node_bram_we0),
    .node_bram_address1(grp_dataflow_parent_loop_2_fu_58_node_bram_address1),
    .node_bram_ce1(grp_dataflow_parent_loop_2_fu_58_node_bram_ce1),
    .node_bram_d1(grp_dataflow_parent_loop_2_fu_58_node_bram_d1),
    .node_bram_q1(ap_const_lv32_0),
    .node_bram_we1(grp_dataflow_parent_loop_2_fu_58_node_bram_we1),
    .metadata_strm_V_dout(metadata_strm_V_dout),
    .metadata_strm_V_empty_n(metadata_strm_V_empty_n),
    .metadata_strm_V_read(grp_dataflow_parent_loop_2_fu_58_metadata_strm_V_read),
    .edge_strm_V_src_V_dout(edge_strm_V_src_V_dout),
    .edge_strm_V_src_V_empty_n(edge_strm_V_src_V_empty_n),
    .edge_strm_V_src_V_read(grp_dataflow_parent_loop_2_fu_58_edge_strm_V_src_V_read),
    .edge_strm_V_dst_V_dout(edge_strm_V_dst_V_dout),
    .edge_strm_V_dst_V_empty_n(edge_strm_V_dst_V_empty_n),
    .edge_strm_V_dst_V_read(grp_dataflow_parent_loop_2_fu_58_edge_strm_V_dst_V_read),
    .edge_strm_V_c_dout(edge_strm_V_c_dout),
    .edge_strm_V_c_empty_n(edge_strm_V_c_empty_n),
    .edge_strm_V_c_read(grp_dataflow_parent_loop_2_fu_58_edge_strm_V_c_read),
    .msg_out_strm_V_din(grp_dataflow_parent_loop_2_fu_58_msg_out_strm_V_din),
    .msg_out_strm_V_full_n(msg_out_strm_V_full_n),
    .msg_out_strm_V_write(grp_dataflow_parent_loop_2_fu_58_msg_out_strm_V_write),
    .wt_address0(grp_dataflow_parent_loop_2_fu_58_wt_address0),
    .wt_ce0(grp_dataflow_parent_loop_2_fu_58_wt_ce0),
    .wt_d0(grp_dataflow_parent_loop_2_fu_58_wt_d0),
    .wt_q0(wt_q0),
    .wt_we0(grp_dataflow_parent_loop_2_fu_58_wt_we0),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_done(grp_dataflow_parent_loop_2_fu_58_ap_done),
    .ap_start(grp_dataflow_parent_loop_2_fu_58_ap_start),
    .ap_ready(grp_dataflow_parent_loop_2_fu_58_ap_ready),
    .ap_idle(grp_dataflow_parent_loop_2_fu_58_ap_idle),
    .ap_continue(grp_dataflow_parent_loop_2_fu_58_ap_continue)
);

dataflow_parent_loop_1 grp_dataflow_parent_loop_1_fu_78(
    .node_bram_address0(grp_dataflow_parent_loop_1_fu_78_node_bram_address0),
    .node_bram_ce0(grp_dataflow_parent_loop_1_fu_78_node_bram_ce0),
    .node_bram_d0(grp_dataflow_parent_loop_1_fu_78_node_bram_d0),
    .node_bram_q0(node_bram_q0),
    .node_bram_we0(grp_dataflow_parent_loop_1_fu_78_node_bram_we0),
    .node_bram_address1(grp_dataflow_parent_loop_1_fu_78_node_bram_address1),
    .node_bram_ce1(grp_dataflow_parent_loop_1_fu_78_node_bram_ce1),
    .node_bram_d1(grp_dataflow_parent_loop_1_fu_78_node_bram_d1),
    .node_bram_q1(ap_const_lv32_0),
    .node_bram_we1(grp_dataflow_parent_loop_1_fu_78_node_bram_we1),
    .metadata_strm_V_dout(metadata_strm_V_dout),
    .metadata_strm_V_empty_n(metadata_strm_V_empty_n),
    .metadata_strm_V_read(grp_dataflow_parent_loop_1_fu_78_metadata_strm_V_read),
    .msg_in_strm_V_dout(msg_in_strm_V_dout),
    .msg_in_strm_V_empty_n(msg_in_strm_V_empty_n),
    .msg_in_strm_V_read(grp_dataflow_parent_loop_1_fu_78_msg_in_strm_V_read),
    .node_out_strm_V_din(grp_dataflow_parent_loop_1_fu_78_node_out_strm_V_din),
    .node_out_strm_V_full_n(node_out_strm_V_full_n),
    .node_out_strm_V_write(grp_dataflow_parent_loop_1_fu_78_node_out_strm_V_write),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_done(grp_dataflow_parent_loop_1_fu_78_ap_done),
    .ap_start(grp_dataflow_parent_loop_1_fu_78_ap_start),
    .ap_ready(grp_dataflow_parent_loop_1_fu_78_ap_ready),
    .ap_idle(grp_dataflow_parent_loop_1_fu_78_ap_idle),
    .ap_continue(grp_dataflow_parent_loop_1_fu_78_ap_continue)
);

always @ (posedge ap_rst or posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_rst or posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_grp_dataflow_parent_loop_1_fu_78_ap_start <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state3) | ((1'b1 == ap_CS_fsm_state4) & (1'b0 == ap_sync_grp_dataflow_parent_loop_1_fu_78_ap_ready)))) begin
            ap_reg_grp_dataflow_parent_loop_1_fu_78_ap_start <= 1'b1;
        end else if ((1'b1 == grp_dataflow_parent_loop_1_fu_78_ap_ready)) begin
            ap_reg_grp_dataflow_parent_loop_1_fu_78_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_rst or posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_grp_dataflow_parent_loop_2_fu_58_ap_start <= 1'b0;
    end else begin
        if ((((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0)) | ((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_sync_grp_dataflow_parent_loop_2_fu_58_ap_ready)))) begin
            ap_reg_grp_dataflow_parent_loop_2_fu_58_ap_start <= 1'b1;
        end else if ((1'b1 == grp_dataflow_parent_loop_2_fu_58_ap_ready)) begin
            ap_reg_grp_dataflow_parent_loop_2_fu_58_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_rst or posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_grp_dataflow_parent_loop_1_fu_78_ap_ready <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state4)) begin
            if (~(1'b0 == grp_dataflow_parent_loop_1_fu_78_ap_done)) begin
                ap_sync_reg_grp_dataflow_parent_loop_1_fu_78_ap_ready <= 1'b0;
            end else if ((1'b1 == grp_dataflow_parent_loop_1_fu_78_ap_ready)) begin
                ap_sync_reg_grp_dataflow_parent_loop_1_fu_78_ap_ready <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_rst or posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_grp_dataflow_parent_loop_2_fu_58_ap_ready <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            if (~(1'b0 == grp_dataflow_parent_loop_2_fu_58_ap_done)) begin
                ap_sync_reg_grp_dataflow_parent_loop_2_fu_58_ap_ready <= 1'b0;
            end else if ((1'b1 == grp_dataflow_parent_loop_2_fu_58_ap_ready)) begin
                ap_sync_reg_grp_dataflow_parent_loop_2_fu_58_ap_ready <= 1'b1;
            end
        end
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & ~(1'b0 == grp_dataflow_parent_loop_1_fu_78_ap_done))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & ~(1'b0 == grp_dataflow_parent_loop_1_fu_78_ap_done))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_sync_reg_grp_dataflow_parent_loop_1_fu_78_ap_ready)) begin
        ap_sync_grp_dataflow_parent_loop_1_fu_78_ap_ready = grp_dataflow_parent_loop_1_fu_78_ap_ready;
    end else begin
        ap_sync_grp_dataflow_parent_loop_1_fu_78_ap_ready = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_sync_reg_grp_dataflow_parent_loop_2_fu_58_ap_ready)) begin
        ap_sync_grp_dataflow_parent_loop_2_fu_58_ap_ready = grp_dataflow_parent_loop_2_fu_58_ap_ready;
    end else begin
        ap_sync_grp_dataflow_parent_loop_2_fu_58_ap_ready = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        edge_strm_V_c_read = grp_dataflow_parent_loop_2_fu_58_edge_strm_V_c_read;
    end else begin
        edge_strm_V_c_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        edge_strm_V_dst_V_read = grp_dataflow_parent_loop_2_fu_58_edge_strm_V_dst_V_read;
    end else begin
        edge_strm_V_dst_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        edge_strm_V_src_V_read = grp_dataflow_parent_loop_2_fu_58_edge_strm_V_src_V_read;
    end else begin
        edge_strm_V_src_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & ~(1'b0 == grp_dataflow_parent_loop_1_fu_78_ap_done))) begin
        grp_dataflow_parent_loop_1_fu_78_ap_continue = 1'b1;
    end else begin
        grp_dataflow_parent_loop_1_fu_78_ap_continue = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & ~(1'b0 == grp_dataflow_parent_loop_2_fu_58_ap_done))) begin
        grp_dataflow_parent_loop_2_fu_58_ap_continue = 1'b1;
    end else begin
        grp_dataflow_parent_loop_2_fu_58_ap_continue = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        metadata_strm_V_read = grp_dataflow_parent_loop_1_fu_78_metadata_strm_V_read;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        metadata_strm_V_read = grp_dataflow_parent_loop_2_fu_58_metadata_strm_V_read;
    end else begin
        metadata_strm_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        msg_in_strm_V_read = grp_dataflow_parent_loop_1_fu_78_msg_in_strm_V_read;
    end else begin
        msg_in_strm_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        msg_out_strm_V_write = grp_dataflow_parent_loop_2_fu_58_msg_out_strm_V_write;
    end else begin
        msg_out_strm_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        node_bram_address0 = grp_dataflow_parent_loop_1_fu_78_node_bram_address0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        node_bram_address0 = grp_dataflow_parent_loop_2_fu_58_node_bram_address0;
    end else begin
        node_bram_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        node_bram_address1 = grp_dataflow_parent_loop_1_fu_78_node_bram_address1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        node_bram_address1 = grp_dataflow_parent_loop_2_fu_58_node_bram_address1;
    end else begin
        node_bram_address1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        node_bram_ce0 = grp_dataflow_parent_loop_1_fu_78_node_bram_ce0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        node_bram_ce0 = grp_dataflow_parent_loop_2_fu_58_node_bram_ce0;
    end else begin
        node_bram_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        node_bram_ce1 = grp_dataflow_parent_loop_1_fu_78_node_bram_ce1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        node_bram_ce1 = grp_dataflow_parent_loop_2_fu_58_node_bram_ce1;
    end else begin
        node_bram_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        node_bram_d1 = grp_dataflow_parent_loop_1_fu_78_node_bram_d1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        node_bram_d1 = grp_dataflow_parent_loop_2_fu_58_node_bram_d1;
    end else begin
        node_bram_d1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        node_bram_we1 = grp_dataflow_parent_loop_1_fu_78_node_bram_we1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        node_bram_we1 = grp_dataflow_parent_loop_2_fu_58_node_bram_we1;
    end else begin
        node_bram_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        node_in_strm_V_read = grp_dataflow_parent_loop_2_fu_58_node_in_strm_V_read;
    end else begin
        node_in_strm_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        node_out_strm_V_write = grp_dataflow_parent_loop_1_fu_78_node_out_strm_V_write;
    end else begin
        node_out_strm_V_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (~(1'b0 == grp_dataflow_parent_loop_2_fu_58_ap_done)) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (~(1'b0 == grp_dataflow_parent_loop_1_fu_78_ap_done)) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[ap_const_lv32_0];

assign ap_CS_fsm_state2 = ap_CS_fsm[ap_const_lv32_1];

assign ap_CS_fsm_state3 = ap_CS_fsm[ap_const_lv32_2];

assign ap_CS_fsm_state4 = ap_CS_fsm[ap_const_lv32_3];

assign grp_dataflow_parent_loop_1_fu_78_ap_start = ap_reg_grp_dataflow_parent_loop_1_fu_78_ap_start;

assign grp_dataflow_parent_loop_2_fu_58_ap_start = ap_reg_grp_dataflow_parent_loop_2_fu_58_ap_start;

assign msg_out_strm_V_din = grp_dataflow_parent_loop_2_fu_58_msg_out_strm_V_din;

assign node_out_strm_V_din = grp_dataflow_parent_loop_1_fu_78_node_out_strm_V_din;

assign wt_address0 = grp_dataflow_parent_loop_2_fu_58_wt_address0;

assign wt_ce0 = grp_dataflow_parent_loop_2_fu_58_wt_ce0;

endmodule //top
