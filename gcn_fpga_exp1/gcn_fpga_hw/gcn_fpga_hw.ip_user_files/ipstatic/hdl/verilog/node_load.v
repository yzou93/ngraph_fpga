// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module node_load (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        node_in_strm_V_dout,
        node_in_strm_V_empty_n,
        node_in_strm_V_read,
        node_bram_address1,
        node_bram_ce1,
        node_bram_we1,
        node_bram_d1
);

parameter    ap_ST_fsm_state1 = 3'b1;
parameter    ap_ST_fsm_state2 = 3'b10;
parameter    ap_ST_fsm_state3 = 3'b100;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv6_0 = 6'b000000;
parameter    ap_const_lv16_0 = 16'b0000000000000000;
parameter    ap_const_lv11_0 = 11'b00000000000;
parameter    ap_const_lv16_599 = 16'b10110011001;
parameter    ap_const_lv6_20 = 6'b100000;
parameter    ap_const_lv6_1 = 6'b1;
parameter    ap_const_lv11_599 = 11'b10110011001;
parameter    ap_const_lv11_1 = 11'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] node_in_strm_V_dout;
input   node_in_strm_V_empty_n;
output   node_in_strm_V_read;
output  [15:0] node_bram_address1;
output   node_bram_ce1;
output   node_bram_we1;
output  [31:0] node_bram_d1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg node_in_strm_V_read;
reg node_bram_ce1;
reg node_bram_we1;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
reg    node_in_strm_V_blk_n;
wire   [0:0] ap_CS_fsm_state3;
wire   [0:0] exitcond_fu_132_p2;
wire   [15:0] next_mul_fu_114_p2;
reg   [15:0] next_mul_reg_159;
wire   [0:0] ap_CS_fsm_state2;
wire   [5:0] row_2_fu_126_p2;
reg   [5:0] row_2_reg_167;
wire   [10:0] col_2_fu_138_p2;
reg   [5:0] row_reg_80;
reg   [15:0] phi_mul_reg_91;
reg   [10:0] col_reg_103;
wire   [0:0] exitcond1_fu_120_p2;
wire   [63:0] tmp_8_cast_fu_154_p1;
wire   [15:0] tmp_cast_fu_144_p1;
wire   [15:0] tmp_8_fu_148_p2;
reg   [2:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'b1;
end

always @ (posedge ap_rst or posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_rst or posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_continue)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & ~(1'b0 == exitcond1_fu_120_p2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond_fu_132_p2 == 1'b0) & ~((exitcond_fu_132_p2 == 1'b0) & (node_in_strm_V_empty_n == 1'b0)))) begin
        col_reg_103 <= col_2_fu_138_p2;
    end else if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == exitcond1_fu_120_p2))) begin
        col_reg_103 <= ap_const_lv11_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & ~((exitcond_fu_132_p2 == 1'b0) & (node_in_strm_V_empty_n == 1'b0)) & ~(exitcond_fu_132_p2 == 1'b0))) begin
        phi_mul_reg_91 <= next_mul_reg_159;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~((ap_start == 1'b0) | (ap_done_reg == 1'b1)))) begin
        phi_mul_reg_91 <= ap_const_lv16_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & ~((exitcond_fu_132_p2 == 1'b0) & (node_in_strm_V_empty_n == 1'b0)) & ~(exitcond_fu_132_p2 == 1'b0))) begin
        row_reg_80 <= row_2_reg_167;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~((ap_start == 1'b0) | (ap_done_reg == 1'b1)))) begin
        row_reg_80 <= ap_const_lv6_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        next_mul_reg_159 <= next_mul_fu_114_p2;
        row_2_reg_167 <= row_2_fu_126_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_done_reg) | ((1'b1 == ap_CS_fsm_state2) & ~(1'b0 == exitcond1_fu_120_p2)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & ~(1'b0 == exitcond1_fu_120_p2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & ~((exitcond_fu_132_p2 == 1'b0) & (node_in_strm_V_empty_n == 1'b0)))) begin
        node_bram_ce1 = 1'b1;
    end else begin
        node_bram_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond_fu_132_p2 == 1'b0) & ~((exitcond_fu_132_p2 == 1'b0) & (node_in_strm_V_empty_n == 1'b0)))) begin
        node_bram_we1 = 1'b1;
    end else begin
        node_bram_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond_fu_132_p2 == 1'b0))) begin
        node_in_strm_V_blk_n = node_in_strm_V_empty_n;
    end else begin
        node_in_strm_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond_fu_132_p2 == 1'b0) & ~((exitcond_fu_132_p2 == 1'b0) & (node_in_strm_V_empty_n == 1'b0)))) begin
        node_in_strm_V_read = 1'b1;
    end else begin
        node_in_strm_V_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (~((ap_start == 1'b0) | (ap_done_reg == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (~(1'b0 == exitcond1_fu_120_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if ((~((exitcond_fu_132_p2 == 1'b0) & (node_in_strm_V_empty_n == 1'b0)) & ~(exitcond_fu_132_p2 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if (((exitcond_fu_132_p2 == 1'b0) & ~((exitcond_fu_132_p2 == 1'b0) & (node_in_strm_V_empty_n == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[ap_const_lv32_0];

assign ap_CS_fsm_state2 = ap_CS_fsm[ap_const_lv32_1];

assign ap_CS_fsm_state3 = ap_CS_fsm[ap_const_lv32_2];

assign col_2_fu_138_p2 = (col_reg_103 + ap_const_lv11_1);

assign exitcond1_fu_120_p2 = ((row_reg_80 == ap_const_lv6_20) ? 1'b1 : 1'b0);

assign exitcond_fu_132_p2 = ((col_reg_103 == ap_const_lv11_599) ? 1'b1 : 1'b0);

assign next_mul_fu_114_p2 = (phi_mul_reg_91 + ap_const_lv16_599);

assign node_bram_address1 = tmp_8_cast_fu_154_p1;

assign node_bram_d1 = node_in_strm_V_dout;

assign row_2_fu_126_p2 = (row_reg_80 + ap_const_lv6_1);

assign tmp_8_cast_fu_154_p1 = tmp_8_fu_148_p2;

assign tmp_8_fu_148_p2 = (phi_mul_reg_91 + tmp_cast_fu_144_p1);

assign tmp_cast_fu_144_p1 = col_reg_103;

endmodule //node_load
