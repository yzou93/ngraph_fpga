-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity top is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    node_in_strm_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    node_in_strm_V_empty_n : IN STD_LOGIC;
    node_in_strm_V_read : OUT STD_LOGIC;
    edge_strm_V_src_V_dout : IN STD_LOGIC_VECTOR (11 downto 0);
    edge_strm_V_src_V_empty_n : IN STD_LOGIC;
    edge_strm_V_src_V_read : OUT STD_LOGIC;
    edge_strm_V_dst_V_dout : IN STD_LOGIC_VECTOR (11 downto 0);
    edge_strm_V_dst_V_empty_n : IN STD_LOGIC;
    edge_strm_V_dst_V_read : OUT STD_LOGIC;
    edge_strm_V_c_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    edge_strm_V_c_empty_n : IN STD_LOGIC;
    edge_strm_V_c_read : OUT STD_LOGIC;
    metadata_strm_V_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    metadata_strm_V_empty_n : IN STD_LOGIC;
    metadata_strm_V_read : OUT STD_LOGIC;
    node_out_strm_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    node_out_strm_V_full_n : IN STD_LOGIC;
    node_out_strm_V_write : OUT STD_LOGIC;
    wt_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    wt_ce0 : OUT STD_LOGIC;
    wt_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of top is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "top,hls_ip_2016_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k325tffg900-2,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.454000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=129,HLS_SYN_DSP=2,HLS_SYN_FF=639,HLS_SYN_LUT=580}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (20 downto 0) := "000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (20 downto 0) := "000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (20 downto 0) := "000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (20 downto 0) := "000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (20 downto 0) := "000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (20 downto 0) := "000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (20 downto 0) := "000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (20 downto 0) := "000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (20 downto 0) := "000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (20 downto 0) := "001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (20 downto 0) := "010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (20 downto 0) := "100000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv7_55 : STD_LOGIC_VECTOR (6 downto 0) := "1010101";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_lv16_599 : STD_LOGIC_VECTOR (15 downto 0) := "0000010110011001";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv11_599 : STD_LOGIC_VECTOR (10 downto 0) := "10110011001";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal node_in_strm_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state7 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal exitcond5_fu_469_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal edge_strm_V_src_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state9 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal exitcond6_fu_506_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal edge_strm_V_dst_V_blk_n : STD_LOGIC;
    signal edge_strm_V_c_blk_n : STD_LOGIC;
    signal metadata_strm_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state8 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal node_out_strm_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state21 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal dst_1_fu_396_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal dst_1_reg_599 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal indvarinc_fu_402_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvarinc_reg_604 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal indvarinc1_fu_408_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal src_1_fu_445_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal src_1_reg_623 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal next_mul_fu_451_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal next_mul_reg_628 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal row_2_fu_463_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal row_2_reg_636 : STD_LOGIC_VECTOR (5 downto 0);
    signal col_2_fu_475_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal node_in_bram_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal node_in_bram_load_reg_649 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_654 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_1_fu_511_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_1_reg_662 : STD_LOGIC_VECTOR (31 downto 0);
    signal edge_strm_V_c0_status : STD_LOGIC;
    signal tmp_c_reg_667 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_525_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_9_reg_672 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_386_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_reg_677 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal row_1_fu_547_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal row_1_reg_685 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal tmp_9_cast_fu_561_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_9_cast_reg_690 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond3_fu_541_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal col_1_fu_571_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal col_1_reg_698 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal exitcond_fu_565_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal node_in_bram_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal node_in_bram_ce0 : STD_LOGIC;
    signal node_in_bram_we0 : STD_LOGIC;
    signal node_out_bram_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal node_out_bram_ce0 : STD_LOGIC;
    signal node_out_bram_we0 : STD_LOGIC;
    signal node_out_bram_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal node_out_bram_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal dst_reg_274 : STD_LOGIC_VECTOR (6 downto 0);
    signal invdar_reg_285 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_3_fu_433_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_427_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond1_fu_390_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal invdar1_reg_297 : STD_LOGIC_VECTOR (3 downto 0);
    signal src_reg_308 : STD_LOGIC_VECTOR (6 downto 0);
    signal row_reg_319 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond2_fu_439_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_mul_reg_330 : STD_LOGIC_VECTOR (15 downto 0);
    signal col_reg_342 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond4_fu_457_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_reg_353 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal row1_reg_364 : STD_LOGIC_VECTOR (5 downto 0);
    signal col2_reg_375 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_1_fu_422_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_20_cast_fu_491_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_11_fu_536_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_15_cast_fu_586_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal edge_strm_V_c0_update : STD_LOGIC;
    signal ap_CS_fsm_state10 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_fu_414_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_10_cast_fu_481_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_13_fu_485_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_10_fu_529_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_5_fu_553_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_cast_fu_577_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_6_fu_581_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (20 downto 0);

    component top_fadd_32ns_32nbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component top_node_in_bram IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component top_node_out_bram IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    node_in_bram_U : component top_node_in_bram
    generic map (
        DataWidth => 32,
        AddressRange => 45856,
        AddressWidth => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => node_in_bram_address0,
        ce0 => node_in_bram_ce0,
        we0 => node_in_bram_we0,
        d0 => node_in_strm_V_dout,
        q0 => node_in_bram_q0);

    node_out_bram_U : component top_node_out_bram
    generic map (
        DataWidth => 32,
        AddressRange => 512,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => node_out_bram_address0,
        ce0 => node_out_bram_ce0,
        we0 => node_out_bram_we0,
        d0 => node_out_bram_d0,
        q0 => node_out_bram_q0);

    top_fadd_32ns_32nbkb_U1 : component top_fadd_32ns_32nbkb
    generic map (
        ID => 1,
        NUM_STAGE => 8,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_c_reg_667,
        din1 => node_in_bram_load_reg_649,
        ce => ap_const_logic_1,
        dout => grp_fu_386_p2);





    ap_CS_fsm_assign_proc : process(ap_rst, ap_clk)
    begin
        if (ap_rst = '1') then
            ap_CS_fsm <= ap_ST_fsm_state1;
        elsif (ap_clk'event and ap_clk =  '1') then
            ap_CS_fsm <= ap_NS_fsm;
        end if;
    end process;


    col2_reg_375_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state19) and (ap_const_lv1_0 = exitcond3_fu_541_p2))) then 
                col2_reg_375 <= ap_const_lv5_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state21) and not((node_out_strm_V_full_n = ap_const_logic_0)))) then 
                col2_reg_375 <= col_1_reg_698;
            end if; 
        end if;
    end process;

    col_reg_342_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state6) and (ap_const_lv1_0 = exitcond4_fu_457_p2))) then 
                col_reg_342 <= ap_const_lv11_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state7) and (exitcond5_fu_469_p2 = ap_const_lv1_0) and not(((exitcond5_fu_469_p2 = ap_const_lv1_0) and (node_in_strm_V_empty_n = ap_const_logic_0))))) then 
                col_reg_342 <= col_2_fu_475_p2;
            end if; 
        end if;
    end process;

    dst_reg_274_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state19) and not((ap_const_lv1_0 = exitcond3_fu_541_p2)))) then 
                dst_reg_274 <= dst_1_reg_599;
            elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
                dst_reg_274 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    i_reg_353_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state18))) then 
                i_reg_353 <= i_1_reg_662;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state8) and not((metadata_strm_V_empty_n = ap_const_logic_0)))) then 
                i_reg_353 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    invdar1_reg_297_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = tmp_2_fu_427_p2))) then 
                invdar1_reg_297 <= indvarinc1_fu_408_p2;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state3))) then 
                invdar1_reg_297 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    invdar_reg_285_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state2) and (ap_const_lv1_0 = exitcond1_fu_390_p2))) then 
                invdar_reg_285 <= ap_const_lv5_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = tmp_3_fu_433_p2) and not((ap_const_lv1_0 = tmp_2_fu_427_p2)))) then 
                invdar_reg_285 <= indvarinc_reg_604;
            end if; 
        end if;
    end process;

    phi_mul_reg_330_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond2_fu_439_p2))) then 
                phi_mul_reg_330 <= ap_const_lv16_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state7) and not(((exitcond5_fu_469_p2 = ap_const_lv1_0) and (node_in_strm_V_empty_n = ap_const_logic_0))) and not((exitcond5_fu_469_p2 = ap_const_lv1_0)))) then 
                phi_mul_reg_330 <= next_mul_reg_628;
            end if; 
        end if;
    end process;

    row1_reg_364_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state5) and not((ap_const_lv1_0 = exitcond2_fu_439_p2)))) then 
                row1_reg_364 <= ap_const_lv6_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state20) and not((ap_const_lv1_0 = exitcond_fu_565_p2)))) then 
                row1_reg_364 <= row_1_reg_685;
            end if; 
        end if;
    end process;

    row_reg_319_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond2_fu_439_p2))) then 
                row_reg_319 <= ap_const_lv6_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state7) and not(((exitcond5_fu_469_p2 = ap_const_lv1_0) and (node_in_strm_V_empty_n = ap_const_logic_0))) and not((exitcond5_fu_469_p2 = ap_const_lv1_0)))) then 
                row_reg_319 <= row_2_reg_636;
            end if; 
        end if;
    end process;

    src_reg_308_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state4) and not((ap_const_lv1_0 = tmp_2_fu_427_p2)) and not((ap_const_lv1_0 = tmp_3_fu_433_p2)))) then 
                src_reg_308 <= ap_const_lv7_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state9) and not(((ap_const_lv1_0 = exitcond6_fu_506_p2) and (edge_strm_V_c0_status = ap_const_logic_0))) and not((ap_const_lv1_0 = exitcond6_fu_506_p2)))) then 
                src_reg_308 <= src_1_reg_623;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state20))) then
                col_1_reg_698 <= col_1_fu_571_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state2))) then
                dst_1_reg_599 <= dst_1_fu_396_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state9) and not(((ap_const_lv1_0 = exitcond6_fu_506_p2) and (edge_strm_V_c0_status = ap_const_logic_0))))) then
                i_1_reg_662 <= i_1_fu_511_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state3))) then
                indvarinc_reg_604 <= indvarinc_fu_402_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state6))) then
                next_mul_reg_628 <= next_mul_fu_451_p2;
                row_2_reg_636 <= row_2_fu_463_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state8) and not((metadata_strm_V_empty_n = ap_const_logic_0)))) then
                node_in_bram_load_reg_649 <= node_in_bram_q0;
                tmp_s_reg_654 <= metadata_strm_V_dout(63 downto 32);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state19))) then
                row_1_reg_685 <= row_1_fu_547_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state5))) then
                src_1_reg_623 <= src_1_fu_445_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state17))) then
                tmp_8_reg_677 <= grp_fu_386_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state19) and (ap_const_lv1_0 = exitcond3_fu_541_p2))) then
                    tmp_9_cast_reg_690(9 downto 4) <= tmp_9_cast_fu_561_p1(9 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = exitcond6_fu_506_p2) and not(((ap_const_lv1_0 = exitcond6_fu_506_p2) and (edge_strm_V_c0_status = ap_const_logic_0))))) then
                tmp_9_reg_672 <= tmp_9_fu_525_p1;
                tmp_c_reg_667 <= edge_strm_V_c_dout;
            end if;
        end if;
    end process;
    tmp_9_cast_reg_690(3 downto 0) <= "0000";
    tmp_9_cast_reg_690(10) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, node_in_strm_V_empty_n, metadata_strm_V_empty_n, node_out_strm_V_full_n, exitcond5_fu_469_p2, exitcond6_fu_506_p2, edge_strm_V_c0_status, exitcond3_fu_541_p2, exitcond_fu_565_p2, tmp_3_fu_433_p2, tmp_2_fu_427_p2, exitcond1_fu_390_p2, exitcond2_fu_439_p2, exitcond4_fu_457_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (not((ap_const_lv1_0 = exitcond1_fu_390_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if ((not((ap_const_lv1_0 = tmp_2_fu_427_p2)) and not((ap_const_lv1_0 = tmp_3_fu_433_p2)))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                elsif (((ap_const_lv1_0 = tmp_3_fu_433_p2) and not((ap_const_lv1_0 = tmp_2_fu_427_p2)))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (not((ap_const_lv1_0 = exitcond2_fu_439_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if ((ap_const_lv1_0 = exitcond4_fu_457_p2)) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state7 => 
                if ((not(((exitcond5_fu_469_p2 = ap_const_lv1_0) and (node_in_strm_V_empty_n = ap_const_logic_0))) and not((exitcond5_fu_469_p2 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                elsif (((exitcond5_fu_469_p2 = ap_const_lv1_0) and not(((exitcond5_fu_469_p2 = ap_const_lv1_0) and (node_in_strm_V_empty_n = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                if (not((metadata_strm_V_empty_n = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if ((not(((ap_const_lv1_0 = exitcond6_fu_506_p2) and (edge_strm_V_c0_status = ap_const_logic_0))) and not((ap_const_lv1_0 = exitcond6_fu_506_p2)))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                elsif (((ap_const_lv1_0 = exitcond6_fu_506_p2) and not(((ap_const_lv1_0 = exitcond6_fu_506_p2) and (edge_strm_V_c0_status = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state19 => 
                if (not((ap_const_lv1_0 = exitcond3_fu_541_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state20 => 
                if (not((ap_const_lv1_0 = exitcond_fu_565_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state21 => 
                if (not((node_out_strm_V_full_n = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0 downto 0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9 downto 9);
    ap_CS_fsm_state17 <= ap_CS_fsm(16 downto 16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17 downto 17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18 downto 18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1 downto 1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19 downto 19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20 downto 20);
    ap_CS_fsm_state3 <= ap_CS_fsm(2 downto 2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3 downto 3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4 downto 4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5 downto 5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6 downto 6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7 downto 7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8 downto 8);

    ap_done_assign_proc : process(ap_CS_fsm_state2, exitcond1_fu_390_p2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state2) and not((ap_const_lv1_0 = exitcond1_fu_390_p2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond1_fu_390_p2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state2) and not((ap_const_lv1_0 = exitcond1_fu_390_p2)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    col_1_fu_571_p2 <= std_logic_vector(unsigned(col2_reg_375) + unsigned(ap_const_lv5_1));
    col_2_fu_475_p2 <= std_logic_vector(unsigned(col_reg_342) + unsigned(ap_const_lv11_1));
    dst_1_fu_396_p2 <= std_logic_vector(unsigned(dst_reg_274) + unsigned(ap_const_lv7_1));
    edge_strm_V_c0_status <= (edge_strm_V_src_V_empty_n and edge_strm_V_dst_V_empty_n and edge_strm_V_c_empty_n);

    edge_strm_V_c0_update_assign_proc : process(ap_CS_fsm_state9, exitcond6_fu_506_p2, edge_strm_V_c0_status)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = exitcond6_fu_506_p2) and not(((ap_const_lv1_0 = exitcond6_fu_506_p2) and (edge_strm_V_c0_status = ap_const_logic_0))))) then 
            edge_strm_V_c0_update <= ap_const_logic_1;
        else 
            edge_strm_V_c0_update <= ap_const_logic_0;
        end if; 
    end process;


    edge_strm_V_c_blk_n_assign_proc : process(edge_strm_V_c_empty_n, ap_CS_fsm_state9, exitcond6_fu_506_p2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = exitcond6_fu_506_p2))) then 
            edge_strm_V_c_blk_n <= edge_strm_V_c_empty_n;
        else 
            edge_strm_V_c_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    edge_strm_V_c_read <= edge_strm_V_c0_update;

    edge_strm_V_dst_V_blk_n_assign_proc : process(edge_strm_V_dst_V_empty_n, ap_CS_fsm_state9, exitcond6_fu_506_p2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = exitcond6_fu_506_p2))) then 
            edge_strm_V_dst_V_blk_n <= edge_strm_V_dst_V_empty_n;
        else 
            edge_strm_V_dst_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    edge_strm_V_dst_V_read <= edge_strm_V_c0_update;

    edge_strm_V_src_V_blk_n_assign_proc : process(edge_strm_V_src_V_empty_n, ap_CS_fsm_state9, exitcond6_fu_506_p2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = exitcond6_fu_506_p2))) then 
            edge_strm_V_src_V_blk_n <= edge_strm_V_src_V_empty_n;
        else 
            edge_strm_V_src_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    edge_strm_V_src_V_read <= edge_strm_V_c0_update;
    exitcond1_fu_390_p2 <= "1" when (dst_reg_274 = ap_const_lv7_55) else "0";
    exitcond2_fu_439_p2 <= "1" when (src_reg_308 = ap_const_lv7_55) else "0";
    exitcond3_fu_541_p2 <= "1" when (row1_reg_364 = ap_const_lv6_20) else "0";
    exitcond4_fu_457_p2 <= "1" when (row_reg_319 = ap_const_lv6_20) else "0";
    exitcond5_fu_469_p2 <= "1" when (col_reg_342 = ap_const_lv11_599) else "0";
    exitcond6_fu_506_p2 <= "1" when (i_reg_353 = tmp_s_reg_654) else "0";
    exitcond_fu_565_p2 <= "1" when (col2_reg_375 = ap_const_lv5_10) else "0";
    i_1_fu_511_p2 <= std_logic_vector(unsigned(i_reg_353) + unsigned(ap_const_lv32_1));
    indvarinc1_fu_408_p2 <= std_logic_vector(unsigned(invdar1_reg_297) + unsigned(ap_const_lv4_1));
    indvarinc_fu_402_p2 <= std_logic_vector(unsigned(invdar_reg_285) + unsigned(ap_const_lv5_1));

    metadata_strm_V_blk_n_assign_proc : process(metadata_strm_V_empty_n, ap_CS_fsm_state8)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state8))) then 
            metadata_strm_V_blk_n <= metadata_strm_V_empty_n;
        else 
            metadata_strm_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    metadata_strm_V_read_assign_proc : process(metadata_strm_V_empty_n, ap_CS_fsm_state8)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state8) and not((metadata_strm_V_empty_n = ap_const_logic_0)))) then 
            metadata_strm_V_read <= ap_const_logic_1;
        else 
            metadata_strm_V_read <= ap_const_logic_0;
        end if; 
    end process;

    next_mul_fu_451_p2 <= std_logic_vector(unsigned(phi_mul_reg_330) + unsigned(ap_const_lv16_599));

    node_in_bram_address0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state6, tmp_20_cast_fu_491_p1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state7))) then 
            node_in_bram_address0 <= tmp_20_cast_fu_491_p1(16 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state6))) then 
            node_in_bram_address0 <= ap_const_lv64_0(16 - 1 downto 0);
        else 
            node_in_bram_address0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    node_in_bram_ce0_assign_proc : process(node_in_strm_V_empty_n, ap_CS_fsm_state7, exitcond5_fu_469_p2, ap_CS_fsm_state6)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state6)) or ((ap_const_lv1_1 = ap_CS_fsm_state7) and not(((exitcond5_fu_469_p2 = ap_const_lv1_0) and (node_in_strm_V_empty_n = ap_const_logic_0)))))) then 
            node_in_bram_ce0 <= ap_const_logic_1;
        else 
            node_in_bram_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    node_in_bram_we0_assign_proc : process(node_in_strm_V_empty_n, ap_CS_fsm_state7, exitcond5_fu_469_p2)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state7) and (exitcond5_fu_469_p2 = ap_const_lv1_0) and not(((exitcond5_fu_469_p2 = ap_const_lv1_0) and (node_in_strm_V_empty_n = ap_const_logic_0)))))) then 
            node_in_bram_we0 <= ap_const_logic_1;
        else 
            node_in_bram_we0 <= ap_const_logic_0;
        end if; 
    end process;


    node_in_strm_V_blk_n_assign_proc : process(node_in_strm_V_empty_n, ap_CS_fsm_state7, exitcond5_fu_469_p2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state7) and (exitcond5_fu_469_p2 = ap_const_lv1_0))) then 
            node_in_strm_V_blk_n <= node_in_strm_V_empty_n;
        else 
            node_in_strm_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    node_in_strm_V_read_assign_proc : process(node_in_strm_V_empty_n, ap_CS_fsm_state7, exitcond5_fu_469_p2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state7) and (exitcond5_fu_469_p2 = ap_const_lv1_0) and not(((exitcond5_fu_469_p2 = ap_const_lv1_0) and (node_in_strm_V_empty_n = ap_const_logic_0))))) then 
            node_in_strm_V_read <= ap_const_logic_1;
        else 
            node_in_strm_V_read <= ap_const_logic_0;
        end if; 
    end process;


    node_out_bram_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state20, ap_CS_fsm_state18, tmp_1_fu_422_p1, tmp_11_fu_536_p1, tmp_15_cast_fu_586_p1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state20))) then 
            node_out_bram_address0 <= tmp_15_cast_fu_586_p1(9 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state18))) then 
            node_out_bram_address0 <= tmp_11_fu_536_p1(9 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            node_out_bram_address0 <= tmp_1_fu_422_p1(9 - 1 downto 0);
        else 
            node_out_bram_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    node_out_bram_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state20, ap_CS_fsm_state18)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state4)) or ((ap_const_lv1_1 = ap_CS_fsm_state20)) or ((ap_const_lv1_1 = ap_CS_fsm_state18)))) then 
            node_out_bram_ce0 <= ap_const_logic_1;
        else 
            node_out_bram_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    node_out_bram_d0_assign_proc : process(ap_CS_fsm_state4, tmp_8_reg_677, ap_CS_fsm_state18)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state18))) then 
            node_out_bram_d0 <= tmp_8_reg_677;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            node_out_bram_d0 <= ap_const_lv32_0;
        else 
            node_out_bram_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    node_out_bram_we0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state18)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state4)) or ((ap_const_lv1_1 = ap_CS_fsm_state18)))) then 
            node_out_bram_we0 <= ap_const_logic_1;
        else 
            node_out_bram_we0 <= ap_const_logic_0;
        end if; 
    end process;


    node_out_strm_V_blk_n_assign_proc : process(node_out_strm_V_full_n, ap_CS_fsm_state21)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state21))) then 
            node_out_strm_V_blk_n <= node_out_strm_V_full_n;
        else 
            node_out_strm_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    node_out_strm_V_din <= node_out_bram_q0;

    node_out_strm_V_write_assign_proc : process(node_out_strm_V_full_n, ap_CS_fsm_state21)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state21) and not((node_out_strm_V_full_n = ap_const_logic_0)))) then 
            node_out_strm_V_write <= ap_const_logic_1;
        else 
            node_out_strm_V_write <= ap_const_logic_0;
        end if; 
    end process;

    row_1_fu_547_p2 <= std_logic_vector(unsigned(row1_reg_364) + unsigned(ap_const_lv6_1));
    row_2_fu_463_p2 <= std_logic_vector(unsigned(row_reg_319) + unsigned(ap_const_lv6_1));
    src_1_fu_445_p2 <= std_logic_vector(unsigned(src_reg_308) + unsigned(ap_const_lv7_1));
    tmp_10_cast_fu_481_p1 <= std_logic_vector(resize(unsigned(col_reg_342),16));
    tmp_10_fu_529_p3 <= (tmp_9_reg_672 & ap_const_lv4_0);
    tmp_11_fu_536_p1 <= std_logic_vector(resize(unsigned(tmp_10_fu_529_p3),64));
    tmp_13_fu_485_p2 <= std_logic_vector(unsigned(phi_mul_reg_330) + unsigned(tmp_10_cast_fu_481_p1));
    tmp_15_cast_fu_586_p1 <= std_logic_vector(resize(unsigned(tmp_6_fu_581_p2),64));
    tmp_1_fu_422_p1 <= std_logic_vector(resize(unsigned(tmp_fu_414_p3),64));
    tmp_20_cast_fu_491_p1 <= std_logic_vector(resize(unsigned(tmp_13_fu_485_p2),64));
    tmp_2_fu_427_p2 <= "1" when (invdar1_reg_297 = ap_const_lv4_F) else "0";
    tmp_3_fu_433_p2 <= "1" when (invdar_reg_285 = ap_const_lv5_1F) else "0";
    tmp_5_fu_553_p3 <= (row1_reg_364 & ap_const_lv4_0);
    tmp_6_fu_581_p2 <= std_logic_vector(unsigned(tmp_9_cast_reg_690) + unsigned(tmp_cast_fu_577_p1));
    tmp_9_cast_fu_561_p1 <= std_logic_vector(resize(unsigned(tmp_5_fu_553_p3),11));
    tmp_9_fu_525_p1 <= edge_strm_V_dst_V_dout(5 - 1 downto 0);
    tmp_cast_fu_577_p1 <= std_logic_vector(resize(unsigned(col2_reg_375),11));
    tmp_fu_414_p3 <= (invdar_reg_285 & invdar1_reg_297);
    wt_address0 <= ap_const_lv15_0;
    wt_ce0 <= ap_const_logic_0;
end behav;
